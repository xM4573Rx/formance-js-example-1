"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ResponseMatcher_instances, _ResponseMatcher_any;
Object.defineProperty(exports, "__esModule", { value: true });
exports.discardResponseBody = exports.ResponseMatcher = exports.unpackHeaders = exports.matchResponse = exports.matchStatusCode = exports.HTTPClient = void 0;
const zod_1 = require("zod");
const schemas_1 = require("./schemas");
const is_plain_object_1 = require("./is-plain-object");
const errors = __importStar(require("../sdk/models/errors"));
const DEFAULT_FETCHER = (input, init) => {
    // If input is a Request and init is undefined, Bun will discard the method,
    // headers, body and other options that were set on the request object.
    // Node.js and browers would ignore an undefined init value. This check is
    // therefore needed for interop with Bun.
    if (init == null) {
        return fetch(input);
    }
    else {
        return fetch(input, init);
    }
};
class HTTPClient {
    constructor(options = {}) {
        this.options = options;
        this.requestHooks = [];
        this.requestErrorHooks = [];
        this.responseHooks = [];
        this.fetcher = options.fetcher || DEFAULT_FETCHER;
    }
    async request(request) {
        let req = request;
        for (const hook of this.requestHooks) {
            const nextRequest = await hook(req);
            if (nextRequest) {
                req = nextRequest;
            }
        }
        try {
            const res = await this.fetcher(req);
            for (const hook of this.responseHooks) {
                await hook(res, req);
            }
            return res;
        }
        catch (err) {
            for (const hook of this.requestErrorHooks) {
                await hook(err, req);
            }
            throw err;
        }
    }
    addHook(...args) {
        if (args[0] === "beforeRequest") {
            this.requestHooks.push(args[1]);
        }
        else if (args[0] === "requestError") {
            this.requestErrorHooks.push(args[1]);
        }
        else if (args[0] === "response") {
            this.responseHooks.push(args[1]);
        }
        else {
            throw new Error(`Invalid hook type: ${args[0]}`);
        }
        return this;
    }
    removeHook(...args) {
        let target;
        if (args[0] === "beforeRequest") {
            target = this.requestHooks;
        }
        else if (args[0] === "requestError") {
            target = this.requestErrorHooks;
        }
        else if (args[0] === "response") {
            target = this.responseHooks;
        }
        else {
            throw new Error(`Invalid hook type: ${args[0]}`);
        }
        const index = target.findIndex((v) => v === args[1]);
        if (index >= 0) {
            target.splice(index, 1);
        }
        return this;
    }
    clone() {
        const child = new HTTPClient(this.options);
        child.requestHooks = this.requestHooks.slice();
        child.requestErrorHooks = this.requestErrorHooks.slice();
        child.responseHooks = this.responseHooks.slice();
        return child;
    }
}
exports.HTTPClient = HTTPClient;
// A semicolon surrounded by optional whitespace characters is used to separate
// segments in a media type string.
const mediaParamSeparator = /\s*;\s*/g;
function matchContentType(response, pattern) {
    var _a;
    // `*` is a special case which means anything is acceptable.
    if (pattern === "*") {
        return true;
    }
    let contentType = ((_a = response.headers.get("content-type")) === null || _a === void 0 ? void 0 : _a.trim()) || "application/octet-stream";
    contentType = contentType.toLowerCase();
    const wantParts = pattern.toLowerCase().trim().split(mediaParamSeparator);
    const [wantType = "", ...wantParams] = wantParts;
    if (wantType.split("/").length !== 2) {
        return false;
    }
    const gotParts = contentType.split(mediaParamSeparator);
    const [gotType = "", ...gotParams] = gotParts;
    const [type = "", subtype = ""] = gotType.split("/");
    if (!type || !subtype) {
        return false;
    }
    if (wantType !== "*/*" &&
        gotType !== wantType &&
        `${type}/*` !== wantType &&
        `*/${subtype}` !== wantType) {
        return false;
    }
    if (gotParams.length < wantParams.length) {
        return false;
    }
    const params = new Set(gotParams);
    for (const wantParam of wantParams) {
        if (!params.has(wantParam)) {
            return false;
        }
    }
    return true;
}
const codeRangeRE = new RegExp("^[0-9]xx$", "i");
function matchStatusCode(response, codes) {
    const actual = `${response.status}`;
    const expectedCodes = Array.isArray(codes) ? codes : [codes];
    if (!expectedCodes.length) {
        return false;
    }
    return expectedCodes.some((ec) => {
        const code = `${ec}`;
        if (code === "default") {
            return true;
        }
        if (!codeRangeRE.test(`${code}`)) {
            return code === actual;
        }
        const expectFamily = code.charAt(0);
        if (!expectFamily) {
            throw new Error("Invalid status code range");
        }
        const actualFamily = actual.charAt(0);
        if (!actualFamily) {
            throw new Error(`Invalid response status code: ${actual}`);
        }
        return actualFamily === expectFamily;
    });
}
exports.matchStatusCode = matchStatusCode;
function matchResponse(response, code, contentTypePattern) {
    return matchStatusCode(response, code) && matchContentType(response, contentTypePattern);
}
exports.matchResponse = matchResponse;
const headerValRE = /, */;
function unpackHeaders(headers) {
    const out = {};
    for (const [k, v] of headers.entries()) {
        out[k] = v.split(headerValRE);
    }
    return out;
}
exports.unpackHeaders = unpackHeaders;
const defaultContentTypes = {
    sse: "text/event-stream",
    json: "application/json",
    rawBytes: "application/octet-stream",
    rawStream: "application/octet-stream",
    text: "text/plain",
    void: "",
    fail: "",
};
class ResponseMatcher {
    constructor() {
        _ResponseMatcher_instances.add(this);
        this.predicates = [];
    }
    json(codes, schema, opts) {
        return __classPrivateFieldGet(this, _ResponseMatcher_instances, "m", _ResponseMatcher_any).call(this, "json", codes, schema, opts);
    }
    bytes(codes, schema, opts) {
        return __classPrivateFieldGet(this, _ResponseMatcher_instances, "m", _ResponseMatcher_any).call(this, "rawBytes", codes, schema, opts);
    }
    stream(codes, schema, opts) {
        return __classPrivateFieldGet(this, _ResponseMatcher_instances, "m", _ResponseMatcher_any).call(this, "rawStream", codes, schema, opts);
    }
    text(codes, schema, opts) {
        return __classPrivateFieldGet(this, _ResponseMatcher_instances, "m", _ResponseMatcher_any).call(this, "text", codes, schema, opts);
    }
    sse(codes, schema, opts) {
        return __classPrivateFieldGet(this, _ResponseMatcher_instances, "m", _ResponseMatcher_any).call(this, "sse", codes, schema, opts);
    }
    void(codes, schema, opts) {
        return __classPrivateFieldGet(this, _ResponseMatcher_instances, "m", _ResponseMatcher_any).call(this, "void", codes, schema, opts);
    }
    fail(codes) {
        return __classPrivateFieldGet(this, _ResponseMatcher_instances, "m", _ResponseMatcher_any).call(this, "fail", codes, (0, zod_1.never)(), { fail: true });
    }
    async match(response, 
    // envelope
    options) {
        let pred;
        for (const predicate of this.predicates) {
            const { codes, ctype } = predicate;
            if (ctype && matchResponse(response, codes, ctype)) {
                pred = predicate;
                break;
            }
            else if (!ctype && matchStatusCode(response, codes)) {
                pred = predicate;
                break;
            }
        }
        if (pred == null) {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response status or content-type", response, responseBody);
        }
        const { method, schema } = pred;
        let raw;
        switch (method) {
            case "json":
                raw = await response.json();
                break;
            case "rawBytes":
                raw = await response.arrayBuffer();
                break;
            case "rawStream":
                raw = response.body;
                break;
            case "text":
                raw = await response.text();
                break;
            case "sse":
                raw = response.body;
                break;
            case "void":
                raw = await discardResponseBody(response);
                break;
            case "fail":
                raw = await response.text();
                break;
            default:
                method;
                throw new Error(`Unsupported response type: ${method}`);
        }
        const resultKey = pred.key || (options === null || options === void 0 ? void 0 : options.resultKey);
        let data;
        if (pred.fail) {
            throw new errors.SDKError("API error occurred", response, typeof raw === "string" ? raw : "");
        }
        else if (pred.err) {
            data = {
                ...options === null || options === void 0 ? void 0 : options.extraFields,
                ...(pred.hdrs ? { Headers: unpackHeaders(response.headers) } : null),
                ...((0, is_plain_object_1.isPlainObject)(raw) ? raw : null),
            };
        }
        else if (resultKey) {
            data = {
                ...options === null || options === void 0 ? void 0 : options.extraFields,
                ...(pred.hdrs ? { Headers: unpackHeaders(response.headers) } : null),
                [resultKey]: raw,
            };
        }
        else {
            data = {
                ...options === null || options === void 0 ? void 0 : options.extraFields,
                ...(pred.hdrs ? { Headers: unpackHeaders(response.headers) } : null),
            };
        }
        const parser = "inboundSchema" in schema ? schema.inboundSchema : schema;
        const body = (0, schemas_1.parse)(data, (v) => parser.parse(v), "Response validation failed");
        if (body instanceof Error) {
            throw body;
        }
        return [body, raw];
    }
}
exports.ResponseMatcher = ResponseMatcher;
_ResponseMatcher_instances = new WeakSet(), _ResponseMatcher_any = function _ResponseMatcher_any(method, codes, schema, opts) {
    const ctype = (opts === null || opts === void 0 ? void 0 : opts.ctype) || defaultContentTypes[method];
    const hdrs = !!(opts === null || opts === void 0 ? void 0 : opts.hdrs);
    const key = opts === null || opts === void 0 ? void 0 : opts.key;
    const err = !!(opts === null || opts === void 0 ? void 0 : opts.err);
    const fail = !!(opts === null || opts === void 0 ? void 0 : opts.fail);
    this.predicates.push({
        method,
        codes,
        ctype,
        schema,
        hdrs,
        key,
        err,
        fail,
    });
    return this;
};
/**
 * Discards the response body to free up resources.
 *
 * To learn why this is need, see the undici docs:
 * https://undici.nodejs.org/#/?id=garbage-collection
 */
async function discardResponseBody(res) {
    var _a;
    const reader = (_a = res.body) === null || _a === void 0 ? void 0 : _a.getReader();
    if (reader == null) {
        return;
    }
    try {
        let done = false;
        while (!done) {
            const res = await reader.read();
            done = res.done;
        }
    }
    finally {
        reader.releaseLock();
    }
}
exports.discardResponseBody = discardResponseBody;
//# sourceMappingURL=http.js.map
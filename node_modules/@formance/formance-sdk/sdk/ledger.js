"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ledger = void 0;
const hooks_1 = require("../hooks");
const config_1 = require("../lib/config");
const encodings_1 = require("../lib/encodings");
const http_1 = require("../lib/http");
const schemas$ = __importStar(require("../lib/schemas"));
const sdks_1 = require("../lib/sdks");
const errors = __importStar(require("./models/errors"));
const operations = __importStar(require("./models/operations"));
class Ledger extends sdks_1.ClientSDK {
    constructor(options = {}) {
        const opt = options;
        let hooks;
        if (typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof hooks_1.SDKHooks) {
            hooks = opt.hooks;
        }
        else {
            hooks = new hooks_1.SDKHooks();
        }
        super({
            client: options.httpClient || new http_1.HTTPClient(),
            baseURL: (0, config_1.serverURLFromOptions)(options),
            hooks,
        });
        this.options$ = { ...options, hooks };
        void this.options$;
    }
    /**
     * Create a new batch of transactions to a ledger
     */
    async createTransactions(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.CreateTransactionsRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_1.encodeJSON)("body", payload$.Transactions, { explode: true });
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/transactions/batch")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "CreateTransactions",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.CreateTransactionsResponse$, { key: "TransactionsResponse" })
            .json("default", errors.ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Set the metadata of a transaction by its ID
     */
    async addMetadataOnTransaction(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.AddMetadataOnTransactionRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_1.encodeJSON)("body", payload$.RequestBody, { explode: true });
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
            txid: (0, encodings_1.encodeSimple)("txid", payload$.txid, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/transactions/{txid}/metadata")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "addMetadataOnTransaction",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void(204, operations.AddMetadataOnTransactionResponse$)
            .json("default", errors.ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Add metadata to an account
     */
    async addMetadataToAccount(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.AddMetadataToAccountRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_1.encodeJSON)("body", payload$.RequestBody, { explode: true });
        const pathParams$ = {
            address: (0, encodings_1.encodeSimple)("address", payload$.address, {
                explode: false,
                charEncoding: "percent",
            }),
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/accounts/{address}/metadata")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "addMetadataToAccount",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void(204, operations.AddMetadataToAccountResponse$)
            .json("default", errors.ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Count the accounts from a ledger
     */
    async countAccounts(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.CountAccountsRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/accounts")(pathParams$);
        const query$ = (0, encodings_1.queryJoin)((0, encodings_1.encodeFormQuery)({
            address: payload$.address,
        }), (0, encodings_1.encodeDeepObjectQuery)({
            metadata: payload$.metadata,
        }));
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "countAccounts",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "HEAD",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void(200, operations.CountAccountsResponse$, { hdrs: true })
            .json("default", errors.ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Count the transactions from a ledger
     */
    async countTransactions(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.CountTransactionsRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/transactions")(pathParams$);
        const query$ = (0, encodings_1.queryJoin)((0, encodings_1.encodeFormQuery)({
            reference: payload$.reference,
            source: payload$.source,
            startTime: payload$.startTime,
            account: payload$.account,
            destination: payload$.destination,
            endTime: payload$.endTime,
        }), (0, encodings_1.encodeDeepObjectQuery)({
            metadata: payload$.metadata,
        }));
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "countTransactions",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "HEAD",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void(200, operations.CountTransactionsResponse$, { hdrs: true })
            .json("default", errors.ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Create a new transaction to a ledger
     */
    async createTransaction(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.CreateTransactionRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_1.encodeJSON)("body", payload$.PostTransaction, { explode: true });
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/transactions")(pathParams$);
        const query$ = (0, encodings_1.encodeFormQuery)({
            preview: payload$.preview,
        });
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "createTransaction",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.CreateTransactionResponse$, { key: "TransactionsResponse" })
            .json("default", errors.ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get account by its address
     */
    async getAccount(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.GetAccountRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            address: (0, encodings_1.encodeSimple)("address", payload$.address, {
                explode: false,
                charEncoding: "percent",
            }),
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/accounts/{address}")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "getAccount",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.GetAccountResponse$, { key: "AccountResponse" })
            .json("default", errors.ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get the balances from a ledger's account
     */
    async getBalances(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.GetBalancesRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/balances")(pathParams$);
        const query$ = (0, encodings_1.encodeFormQuery)({
            address: payload$.address,
            after: payload$.after,
            cursor: payload$.cursor,
            pageSize: payload$.pageSize,
        });
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "getBalances",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.GetBalancesResponse$, { key: "BalancesCursorResponse" })
            .json("default", errors.ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get the aggregated balances from selected accounts
     */
    async getBalancesAggregated(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.GetBalancesAggregatedRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/aggregate/balances")(pathParams$);
        const query$ = (0, encodings_1.encodeFormQuery)({
            address: payload$.address,
            useInsertionDate: payload$.useInsertionDate,
        });
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "getBalancesAggregated",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.GetBalancesAggregatedResponse$, {
            key: "AggregateBalancesResponse",
        })
            .json("default", errors.ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Show server information
     */
    async getInfo(options) {
        var _a;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const path$ = this.templateURLComponent("/api/ledger/_info")();
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "getInfo",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.GetInfoResponse$, { key: "ConfigInfoResponse" })
            .json("default", errors.ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get information about a ledger
     */
    async getLedgerInfo(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.GetLedgerInfoRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/_info")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "getLedgerInfo",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.GetLedgerInfoResponse$, { key: "LedgerInfoResponse" })
            .json("default", errors.ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get the mapping of a ledger
     */
    async getMapping(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.GetMappingRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/mapping")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "getMapping",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.GetMappingResponse$, { key: "MappingResponse" })
            .json("default", errors.ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get transaction from a ledger by its ID
     */
    async getTransaction(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.GetTransactionRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
            txid: (0, encodings_1.encodeSimple)("txid", payload$.txid, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/transactions/{txid}")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "getTransaction",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.GetTransactionResponse$, { key: "TransactionResponse" })
            .json("default", errors.ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * List accounts from a ledger
     *
     * @remarks
     * List accounts from a ledger, sorted by address in descending order.
     */
    async listAccounts(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.ListAccountsRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/accounts")(pathParams$);
        const query$ = (0, encodings_1.queryJoin)((0, encodings_1.encodeFormQuery)({
            address: payload$.address,
            after: payload$.after,
            balance: payload$.balance,
            cursor: payload$.cursor,
            pageSize: payload$.pageSize,
            pagination_token: payload$.pagination_token,
        }), (0, encodings_1.encodeDeepObjectQuery)({
            metadata: payload$.metadata,
        }));
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "listAccounts",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.ListAccountsResponse$, { key: "AccountsCursorResponse" })
            .json("default", errors.ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * List the logs from a ledger
     *
     * @remarks
     * List the logs from a ledger, sorted by ID in descending order.
     */
    async listLogs(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.ListLogsRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/logs")(pathParams$);
        const query$ = (0, encodings_1.encodeFormQuery)({
            startTime: payload$.startTime,
            after: payload$.after,
            cursor: payload$.cursor,
            endTime: payload$.endTime,
            pageSize: payload$.pageSize,
        });
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "listLogs",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.ListLogsResponse$, { key: "LogsCursorResponse" })
            .json("default", errors.ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * List transactions from a ledger
     *
     * @remarks
     * List transactions from a ledger, sorted by txid in descending order.
     */
    async listTransactions(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.ListTransactionsRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/transactions")(pathParams$);
        const query$ = (0, encodings_1.queryJoin)((0, encodings_1.encodeFormQuery)({
            reference: payload$.reference,
            startTime: payload$.startTime,
            account: payload$.account,
            after: payload$.after,
            cursor: payload$.cursor,
            destination: payload$.destination,
            endTime: payload$.endTime,
            pageSize: payload$.pageSize,
            source: payload$.source,
        }), (0, encodings_1.encodeDeepObjectQuery)({
            metadata: payload$.metadata,
        }));
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "listTransactions",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.ListTransactionsResponse$, { key: "TransactionsCursorResponse" })
            .json("default", errors.ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get statistics from a ledger
     *
     * @remarks
     * Get statistics from a ledger. (aggregate metrics on accounts and transactions)
     *
     */
    async readStats(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.ReadStatsRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/stats")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "readStats",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.ReadStatsResponse$, { key: "StatsResponse" })
            .json("default", errors.ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Revert a ledger transaction by its ID
     */
    async revertTransaction(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.RevertTransactionRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
            txid: (0, encodings_1.encodeSimple)("txid", payload$.txid, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/transactions/{txid}/revert")(pathParams$);
        const query$ = (0, encodings_1.encodeFormQuery)({
            disableChecks: payload$.disableChecks,
        });
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "revertTransaction",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(201, operations.RevertTransactionResponse$, { key: "TransactionResponse" })
            .json("default", errors.ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Execute a Numscript
     *
     * @remarks
     * This route is deprecated, and has been merged into `POST /{ledger}/transactions`.
     *
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async runScript(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.RunScriptRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_1.encodeJSON)("body", payload$.Script, { explode: true });
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/script")(pathParams$);
        const query$ = (0, encodings_1.encodeFormQuery)({
            preview: payload$.preview,
        });
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "runScript",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.RunScriptResponse$, { key: "ScriptResponse" })
            .fail("default")
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Update the mapping of a ledger
     */
    async updateMapping(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.UpdateMappingRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_1.encodeJSON)("body", payload$.Mapping, { explode: true });
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/{ledger}/mapping")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "updateMapping",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "PUT",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.UpdateMappingResponse$, { key: "MappingResponse" })
            .json("default", errors.ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Set the metadata of a transaction by its ID
     */
    async v2AddMetadataOnTransaction(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2AddMetadataOnTransactionRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_1.encodeJSON)("body", payload$.RequestBody, { explode: true });
        const pathParams$ = {
            id: (0, encodings_1.encodeSimple)("id", payload$.id, { explode: false, charEncoding: "percent" }),
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/transactions/{id}/metadata")(pathParams$);
        const query$ = (0, encodings_1.encodeFormQuery)({
            dryRun: payload$.dryRun,
        });
        headers$.set("Idempotency-Key", (0, encodings_1.encodeSimple)("Idempotency-Key", payload$["Idempotency-Key"], {
            explode: false,
            charEncoding: "none",
        }));
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2AddMetadataOnTransaction",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void(204, operations.V2AddMetadataOnTransactionResponse$)
            .json("default", errors.V2ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Add metadata to an account
     */
    async v2AddMetadataToAccount(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2AddMetadataToAccountRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_1.encodeJSON)("body", payload$.RequestBody, { explode: true });
        const pathParams$ = {
            address: (0, encodings_1.encodeSimple)("address", payload$.address, {
                explode: false,
                charEncoding: "percent",
            }),
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/accounts/{address}/metadata")(pathParams$);
        const query$ = (0, encodings_1.encodeFormQuery)({
            dryRun: payload$.dryRun,
        });
        headers$.set("Idempotency-Key", (0, encodings_1.encodeSimple)("Idempotency-Key", payload$["Idempotency-Key"], {
            explode: false,
            charEncoding: "none",
        }));
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2AddMetadataToAccount",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void(204, operations.V2AddMetadataToAccountResponse$)
            .json("default", errors.V2ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Count the accounts from a ledger
     */
    async v2CountAccounts(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2CountAccountsRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/accounts")(pathParams$);
        const query$ = (0, encodings_1.queryJoin)((0, encodings_1.encodeFormQuery)({
            pit: payload$.pit,
        }), (0, encodings_1.encodeJSONQuery)({
            query: payload$.query,
        }, { explode: false }));
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2CountAccounts",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "HEAD",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void(204, operations.V2CountAccountsResponse$, { hdrs: true })
            .json("default", errors.V2ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Count the transactions from a ledger
     */
    async v2CountTransactions(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2CountTransactionsRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/transactions")(pathParams$);
        const query$ = (0, encodings_1.queryJoin)((0, encodings_1.encodeFormQuery)({
            pit: payload$.pit,
        }), (0, encodings_1.encodeJSONQuery)({
            query: payload$.query,
        }, { explode: false }));
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2CountTransactions",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "HEAD",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void(204, operations.V2CountTransactionsResponse$, { hdrs: true })
            .json("default", errors.V2ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Bulk request
     */
    async v2CreateBulk(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2CreateBulkRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_1.encodeJSON)("body", payload$.RequestBody, { explode: true });
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/_bulk")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2CreateBulk",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json([200, 400], operations.V2CreateBulkResponse$, { key: "V2BulkResponse" })
            .json("default", errors.V2ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Create a ledger
     */
    async v2CreateLedger(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2CreateLedgerRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_1.encodeJSON)("body", payload$.V2CreateLedgerRequest, { explode: true });
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2CreateLedger",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void(204, operations.V2CreateLedgerResponse$)
            .json("default", errors.V2ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Create a new transaction to a ledger
     */
    async v2CreateTransaction(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2CreateTransactionRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_1.encodeJSON)("body", payload$.V2PostTransaction, { explode: true });
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/transactions")(pathParams$);
        const query$ = (0, encodings_1.encodeFormQuery)({
            dryRun: payload$.dryRun,
        });
        headers$.set("Idempotency-Key", (0, encodings_1.encodeSimple)("Idempotency-Key", payload$["Idempotency-Key"], {
            explode: false,
            charEncoding: "none",
        }));
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2CreateTransaction",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.V2CreateTransactionResponse$, {
            key: "V2CreateTransactionResponse",
        })
            .json("default", errors.V2ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Delete metadata by key
     *
     * @remarks
     * Delete metadata by key
     */
    async v2DeleteAccountMetadata(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2DeleteAccountMetadataRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            address: (0, encodings_1.encodeSimple)("address", payload$.address, {
                explode: false,
                charEncoding: "percent",
            }),
            key: (0, encodings_1.encodeSimple)("key", payload$.key, { explode: false, charEncoding: "percent" }),
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/accounts/{address}/metadata/{key}")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2DeleteAccountMetadata",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "DELETE",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void("2XX", operations.V2DeleteAccountMetadataResponse$)
            .fail("default")
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Delete ledger metadata by key
     */
    async v2DeleteLedgerMetadata(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2DeleteLedgerMetadataRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            key: (0, encodings_1.encodeSimple)("key", payload$.key, { explode: false, charEncoding: "percent" }),
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/metadata/{key}")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2DeleteLedgerMetadata",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "DELETE",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void(204, operations.V2DeleteLedgerMetadataResponse$)
            .json("default", errors.V2ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Delete metadata by key
     *
     * @remarks
     * Delete metadata by key
     */
    async v2DeleteTransactionMetadata(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2DeleteTransactionMetadataRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            id: (0, encodings_1.encodeSimple)("id", payload$.id, { explode: false, charEncoding: "percent" }),
            key: (0, encodings_1.encodeSimple)("key", payload$.key, { explode: false, charEncoding: "percent" }),
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/transactions/{id}/metadata/{key}")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2DeleteTransactionMetadata",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "DELETE",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void("2XX", operations.V2DeleteTransactionMetadataResponse$)
            .json("default", errors.V2ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get account by its address
     */
    async v2GetAccount(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2GetAccountRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            address: (0, encodings_1.encodeSimple)("address", payload$.address, {
                explode: false,
                charEncoding: "percent",
            }),
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/accounts/{address}")(pathParams$);
        const query$ = (0, encodings_1.encodeFormQuery)({
            expand: payload$.expand,
            pit: payload$.pit,
        });
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2GetAccount",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.V2GetAccountResponse$, { key: "V2AccountResponse" })
            .json("default", errors.V2ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get the aggregated balances from selected accounts
     */
    async v2GetBalancesAggregated(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2GetBalancesAggregatedRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/aggregate/balances")(pathParams$);
        const query$ = (0, encodings_1.queryJoin)((0, encodings_1.encodeFormQuery)({
            pit: payload$.pit,
            useInsertionDate: payload$.useInsertionDate,
        }), (0, encodings_1.encodeJSONQuery)({
            query: payload$.query,
        }, { explode: false }));
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2GetBalancesAggregated",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.V2GetBalancesAggregatedResponse$, {
            key: "V2AggregateBalancesResponse",
        })
            .json("default", errors.V2ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Show server information
     */
    async v2GetInfo(options) {
        var _a;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const path$ = this.templateURLComponent("/api/ledger/v2/_info")();
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2GetInfo",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.V2GetInfoResponse$, { key: "V2ConfigInfoResponse" })
            .json("default", errors.V2ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get a ledger
     */
    async v2GetLedger(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2GetLedgerRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2GetLedger",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.V2GetLedgerResponse$, { key: "V2GetLedgerResponse" })
            .json("default", errors.V2ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get information about a ledger
     */
    async v2GetLedgerInfo(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2GetLedgerInfoRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/_info")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2GetLedgerInfo",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.V2GetLedgerInfoResponse$, { key: "V2LedgerInfoResponse" })
            .json("default", errors.V2ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get transaction from a ledger by its ID
     */
    async v2GetTransaction(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2GetTransactionRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            id: (0, encodings_1.encodeSimple)("id", payload$.id, { explode: false, charEncoding: "percent" }),
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/transactions/{id}")(pathParams$);
        const query$ = (0, encodings_1.encodeFormQuery)({
            expand: payload$.expand,
            pit: payload$.pit,
        });
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2GetTransaction",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.V2GetTransactionResponse$, { key: "V2GetTransactionResponse" })
            .json("default", errors.V2ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get list of volumes with balances for (account/asset)
     */
    async v2GetVolumesWithBalances(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2GetVolumesWithBalancesRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/volumes")(pathParams$);
        const query$ = (0, encodings_1.queryJoin)((0, encodings_1.encodeFormQuery)({
            endTime: payload$.endTime,
            groupBy: payload$.groupBy,
            insertionDate: payload$.insertionDate,
            pageSize: payload$.pageSize,
            startTime: payload$.startTime,
            cursor: payload$.cursor,
        }), (0, encodings_1.encodeJSONQuery)({
            query: payload$.query,
        }, { explode: false }));
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2GetVolumesWithBalances",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.V2GetVolumesWithBalancesResponse$, {
            key: "V2VolumesWithBalanceCursorResponse",
        })
            .json("default", errors.V2ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * List accounts from a ledger
     *
     * @remarks
     * List accounts from a ledger, sorted by address in descending order.
     */
    async v2ListAccounts(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2ListAccountsRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/accounts")(pathParams$);
        const query$ = (0, encodings_1.queryJoin)((0, encodings_1.encodeFormQuery)({
            pageSize: payload$.pageSize,
            pit: payload$.pit,
            cursor: payload$.cursor,
            expand: payload$.expand,
        }), (0, encodings_1.encodeJSONQuery)({
            query: payload$.query,
        }, { explode: false }));
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2ListAccounts",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.V2ListAccountsResponse$, { key: "V2AccountsCursorResponse" })
            .json("default", errors.V2ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * List ledgers
     */
    async v2ListLedgers(request, options) {
        var _a;
        const input$ = typeof request === "undefined" ? {} : request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2ListLedgersRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const path$ = this.templateURLComponent("/api/ledger/v2")();
        const query$ = (0, encodings_1.encodeFormQuery)({
            cursor: payload$.cursor,
            pageSize: payload$.pageSize,
        });
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2ListLedgers",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.V2ListLedgersResponse$, { key: "V2LedgerListResponse" })
            .json("default", errors.V2ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * List the logs from a ledger
     *
     * @remarks
     * List the logs from a ledger, sorted by ID in descending order.
     */
    async v2ListLogs(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2ListLogsRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/logs")(pathParams$);
        const query$ = (0, encodings_1.queryJoin)((0, encodings_1.encodeFormQuery)({
            cursor: payload$.cursor,
            pageSize: payload$.pageSize,
            pit: payload$.pit,
        }), (0, encodings_1.encodeJSONQuery)({
            query: payload$.query,
        }, { explode: false }));
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2ListLogs",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.V2ListLogsResponse$, { key: "V2LogsCursorResponse" })
            .json("default", errors.V2ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * List transactions from a ledger
     *
     * @remarks
     * List transactions from a ledger, sorted by id in descending order.
     */
    async v2ListTransactions(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2ListTransactionsRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/transactions")(pathParams$);
        const query$ = (0, encodings_1.queryJoin)((0, encodings_1.encodeFormQuery)({
            expand: payload$.expand,
            pageSize: payload$.pageSize,
            pit: payload$.pit,
            cursor: payload$.cursor,
        }), (0, encodings_1.encodeJSONQuery)({
            query: payload$.query,
        }, { explode: false }));
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2ListTransactions",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.V2ListTransactionsResponse$, {
            key: "V2TransactionsCursorResponse",
        })
            .json("default", errors.V2ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get statistics from a ledger
     *
     * @remarks
     * Get statistics from a ledger. (aggregate metrics on accounts and transactions)
     *
     */
    async v2ReadStats(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2ReadStatsRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/stats")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2ReadStats",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.V2ReadStatsResponse$, { key: "V2StatsResponse" })
            .json("default", errors.V2ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Revert a ledger transaction by its ID
     */
    async v2RevertTransaction(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2RevertTransactionRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            id: (0, encodings_1.encodeSimple)("id", payload$.id, { explode: false, charEncoding: "percent" }),
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/transactions/{id}/revert")(pathParams$);
        const query$ = (0, encodings_1.encodeFormQuery)({
            atEffectiveDate: payload$.atEffectiveDate,
            force: payload$.force,
        });
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2RevertTransaction",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(201, operations.V2RevertTransactionResponse$, {
            key: "V2RevertTransactionResponse",
        })
            .json("default", errors.V2ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Update ledger metadata
     */
    async v2UpdateLedgerMetadata(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2UpdateLedgerMetadataRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_1.encodeJSON)("body", payload$.RequestBody, { explode: true });
        const pathParams$ = {
            ledger: (0, encodings_1.encodeSimple)("ledger", payload$.ledger, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/ledger/v2/{ledger}/metadata")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2UpdateLedgerMetadata",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "PUT",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void(204, operations.V2UpdateLedgerMetadataResponse$)
            .json("default", errors.V2ErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
}
exports.Ledger = Ledger;
//# sourceMappingURL=ledger.js.map
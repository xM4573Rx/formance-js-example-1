import { SDKOptions } from "../lib/config";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
export declare class Orchestration extends ClientSDK {
    private readonly options$;
    constructor(options?: SDKOptions);
    /**
     * Cancel a running workflow
     *
     * @remarks
     * Cancel a running workflow
     */
    cancelEvent(request: operations.CancelEventRequest, options?: RequestOptions): Promise<operations.CancelEventResponse>;
    /**
     * Create trigger
     *
     * @remarks
     * Create trigger
     */
    createTrigger(request?: shared.TriggerData | undefined, options?: RequestOptions): Promise<operations.CreateTriggerResponse>;
    /**
     * Create workflow
     *
     * @remarks
     * Create a workflow
     */
    createWorkflow(request?: shared.CreateWorkflowRequest | undefined, options?: RequestOptions): Promise<operations.CreateWorkflowResponse>;
    /**
     * Delete trigger
     *
     * @remarks
     * Read trigger
     */
    deleteTrigger(request: operations.DeleteTriggerRequest, options?: RequestOptions): Promise<operations.DeleteTriggerResponse>;
    /**
     * Delete a flow by id
     *
     * @remarks
     * Delete a flow by id
     */
    deleteWorkflow(request: operations.DeleteWorkflowRequest, options?: RequestOptions): Promise<operations.DeleteWorkflowResponse>;
    /**
     * Get a workflow instance by id
     *
     * @remarks
     * Get a workflow instance by id
     */
    getInstance(request: operations.GetInstanceRequest, options?: RequestOptions): Promise<operations.GetInstanceResponse>;
    /**
     * Get a workflow instance history by id
     *
     * @remarks
     * Get a workflow instance history by id
     */
    getInstanceHistory(request: operations.GetInstanceHistoryRequest, options?: RequestOptions): Promise<operations.GetInstanceHistoryResponse>;
    /**
     * Get a workflow instance stage history
     *
     * @remarks
     * Get a workflow instance stage history
     */
    getInstanceStageHistory(request: operations.GetInstanceStageHistoryRequest, options?: RequestOptions): Promise<operations.GetInstanceStageHistoryResponse>;
    /**
     * Get a flow by id
     *
     * @remarks
     * Get a flow by id
     */
    getWorkflow(request: operations.GetWorkflowRequest, options?: RequestOptions): Promise<operations.GetWorkflowResponse>;
    /**
     * List instances of a workflow
     *
     * @remarks
     * List instances of a workflow
     */
    listInstances(request: operations.ListInstancesRequest, options?: RequestOptions): Promise<operations.ListInstancesResponse>;
    /**
     * List triggers
     *
     * @remarks
     * List triggers
     */
    listTriggers(request: operations.ListTriggersRequest, options?: RequestOptions): Promise<operations.ListTriggersResponse>;
    /**
     * List triggers occurrences
     *
     * @remarks
     * List triggers occurrences
     */
    listTriggersOccurrences(request: operations.ListTriggersOccurrencesRequest, options?: RequestOptions): Promise<operations.ListTriggersOccurrencesResponse>;
    /**
     * List registered workflows
     *
     * @remarks
     * List registered workflows
     */
    listWorkflows(options?: RequestOptions): Promise<operations.ListWorkflowsResponse>;
    /**
     * Get server info
     */
    orchestrationgetServerInfo(options?: RequestOptions): Promise<operations.OrchestrationgetServerInfoResponse>;
    /**
     * Read trigger
     *
     * @remarks
     * Read trigger
     */
    readTrigger(request: operations.ReadTriggerRequest, options?: RequestOptions): Promise<operations.ReadTriggerResponse>;
    /**
     * Run workflow
     *
     * @remarks
     * Run workflow
     */
    runWorkflow(request: operations.RunWorkflowRequest, options?: RequestOptions): Promise<operations.RunWorkflowResponse>;
    /**
     * Send an event to a running workflow
     *
     * @remarks
     * Send an event to a running workflow
     */
    sendEvent(request: operations.SendEventRequest, options?: RequestOptions): Promise<operations.SendEventResponse>;
    /**
     * Test trigger
     *
     * @remarks
     * Test trigger
     */
    testTrigger(request: operations.TestTriggerRequest, options?: RequestOptions): Promise<operations.TestTriggerResponse>;
    /**
     * Cancel a running workflow
     *
     * @remarks
     * Cancel a running workflow
     */
    v2CancelEvent(request: operations.V2CancelEventRequest, options?: RequestOptions): Promise<operations.V2CancelEventResponse>;
    /**
     * Create trigger
     *
     * @remarks
     * Create trigger
     */
    v2CreateTrigger(request?: shared.V2TriggerData | undefined, options?: RequestOptions): Promise<operations.V2CreateTriggerResponse>;
    /**
     * Create workflow
     *
     * @remarks
     * Create a workflow
     */
    v2CreateWorkflow(request?: shared.V2CreateWorkflowRequest | undefined, options?: RequestOptions): Promise<operations.V2CreateWorkflowResponse>;
    /**
     * Delete trigger
     *
     * @remarks
     * Read trigger
     */
    v2DeleteTrigger(request: operations.V2DeleteTriggerRequest, options?: RequestOptions): Promise<operations.V2DeleteTriggerResponse>;
    /**
     * Delete a flow by id
     *
     * @remarks
     * Delete a flow by id
     */
    v2DeleteWorkflow(request: operations.V2DeleteWorkflowRequest, options?: RequestOptions): Promise<operations.V2DeleteWorkflowResponse>;
    /**
     * Get a workflow instance by id
     *
     * @remarks
     * Get a workflow instance by id
     */
    v2GetInstance(request: operations.V2GetInstanceRequest, options?: RequestOptions): Promise<operations.V2GetInstanceResponse>;
    /**
     * Get a workflow instance history by id
     *
     * @remarks
     * Get a workflow instance history by id
     */
    v2GetInstanceHistory(request: operations.V2GetInstanceHistoryRequest, options?: RequestOptions): Promise<operations.V2GetInstanceHistoryResponse>;
    /**
     * Get a workflow instance stage history
     *
     * @remarks
     * Get a workflow instance stage history
     */
    v2GetInstanceStageHistory(request: operations.V2GetInstanceStageHistoryRequest, options?: RequestOptions): Promise<operations.V2GetInstanceStageHistoryResponse>;
    /**
     * Get server info
     */
    v2GetServerInfo(options?: RequestOptions): Promise<operations.V2GetServerInfoResponse>;
    /**
     * Get a flow by id
     *
     * @remarks
     * Get a flow by id
     */
    v2GetWorkflow(request: operations.V2GetWorkflowRequest, options?: RequestOptions): Promise<operations.V2GetWorkflowResponse>;
    /**
     * List instances of a workflow
     *
     * @remarks
     * List instances of a workflow
     */
    v2ListInstances(request: operations.V2ListInstancesRequest, options?: RequestOptions): Promise<operations.V2ListInstancesResponse>;
    /**
     * List triggers
     *
     * @remarks
     * List triggers
     */
    v2ListTriggers(request: operations.V2ListTriggersRequest, options?: RequestOptions): Promise<operations.V2ListTriggersResponse>;
    /**
     * List triggers occurrences
     *
     * @remarks
     * List triggers occurrences
     */
    v2ListTriggersOccurrences(request: operations.V2ListTriggersOccurrencesRequest, options?: RequestOptions): Promise<operations.V2ListTriggersOccurrencesResponse>;
    /**
     * List registered workflows
     *
     * @remarks
     * List registered workflows
     */
    v2ListWorkflows(request: operations.V2ListWorkflowsRequest, options?: RequestOptions): Promise<operations.V2ListWorkflowsResponse>;
    /**
     * Read trigger
     *
     * @remarks
     * Read trigger
     */
    v2ReadTrigger(request: operations.V2ReadTriggerRequest, options?: RequestOptions): Promise<operations.V2ReadTriggerResponse>;
    /**
     * Run workflow
     *
     * @remarks
     * Run workflow
     */
    v2RunWorkflow(request: operations.V2RunWorkflowRequest, options?: RequestOptions): Promise<operations.V2RunWorkflowResponse>;
    /**
     * Send an event to a running workflow
     *
     * @remarks
     * Send an event to a running workflow
     */
    v2SendEvent(request: operations.V2SendEventRequest, options?: RequestOptions): Promise<operations.V2SendEventResponse>;
}
//# sourceMappingURL=orchestration.d.ts.map
import { SDKOptions } from "../lib/config";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
export declare class Wallets extends ClientSDK {
    private readonly options$;
    constructor(options?: SDKOptions);
    /**
     * Confirm a hold
     */
    confirmHold(request: operations.ConfirmHoldRequest, options?: RequestOptions): Promise<operations.ConfirmHoldResponse>;
    /**
     * Create a balance
     */
    createBalance(request: operations.CreateBalanceRequest, options?: RequestOptions): Promise<operations.CreateBalanceResponse>;
    /**
     * Create a new wallet
     */
    createWallet(request?: shared.CreateWalletRequest | undefined, options?: RequestOptions): Promise<operations.CreateWalletResponse>;
    /**
     * Credit a wallet
     */
    creditWallet(request: operations.CreditWalletRequest, options?: RequestOptions): Promise<operations.CreditWalletResponse>;
    /**
     * Debit a wallet
     */
    debitWallet(request: operations.DebitWalletRequest, options?: RequestOptions): Promise<operations.DebitWalletResponse>;
    /**
     * Get detailed balance
     */
    getBalance(request: operations.GetBalanceRequest, options?: RequestOptions): Promise<operations.GetBalanceResponse>;
    /**
     * Get a hold
     */
    getHold(request: operations.GetHoldRequest, options?: RequestOptions): Promise<operations.GetHoldResponse>;
    /**
     * Get all holds for a wallet
     */
    getHolds(request: operations.GetHoldsRequest, options?: RequestOptions): Promise<operations.GetHoldsResponse>;
    getTransactions(request: operations.GetTransactionsRequest, options?: RequestOptions): Promise<operations.GetTransactionsResponse>;
    /**
     * Get a wallet
     */
    getWallet(request: operations.GetWalletRequest, options?: RequestOptions): Promise<operations.GetWalletResponse>;
    /**
     * Get wallet summary
     */
    getWalletSummary(request: operations.GetWalletSummaryRequest, options?: RequestOptions): Promise<operations.GetWalletSummaryResponse>;
    /**
     * List balances of a wallet
     */
    listBalances(request: operations.ListBalancesRequest, options?: RequestOptions): Promise<operations.ListBalancesResponse>;
    /**
     * List all wallets
     */
    listWallets(request: operations.ListWalletsRequest, options?: RequestOptions): Promise<operations.ListWalletsResponse>;
    /**
     * Update a wallet
     */
    updateWallet(request: operations.UpdateWalletRequest, options?: RequestOptions): Promise<operations.UpdateWalletResponse>;
    /**
     * Cancel a hold
     */
    voidHold(request: operations.VoidHoldRequest, options?: RequestOptions): Promise<operations.VoidHoldResponse>;
    /**
     * Get server info
     */
    walletsgetServerInfo(options?: RequestOptions): Promise<operations.WalletsgetServerInfoResponse>;
}
//# sourceMappingURL=wallets.d.ts.map
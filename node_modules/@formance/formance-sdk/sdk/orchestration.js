"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Orchestration = void 0;
const hooks_1 = require("../hooks");
const config_1 = require("../lib/config");
const encodings_1 = require("../lib/encodings");
const http_1 = require("../lib/http");
const schemas$ = __importStar(require("../lib/schemas"));
const sdks_1 = require("../lib/sdks");
const errors = __importStar(require("./models/errors"));
const operations = __importStar(require("./models/operations"));
const shared = __importStar(require("./models/shared"));
class Orchestration extends sdks_1.ClientSDK {
    constructor(options = {}) {
        const opt = options;
        let hooks;
        if (typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof hooks_1.SDKHooks) {
            hooks = opt.hooks;
        }
        else {
            hooks = new hooks_1.SDKHooks();
        }
        super({
            client: options.httpClient || new http_1.HTTPClient(),
            baseURL: (0, config_1.serverURLFromOptions)(options),
            hooks,
        });
        this.options$ = { ...options, hooks };
        void this.options$;
    }
    /**
     * Cancel a running workflow
     *
     * @remarks
     * Cancel a running workflow
     */
    async cancelEvent(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.CancelEventRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            instanceID: (0, encodings_1.encodeSimple)("instanceID", payload$.instanceID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/orchestration/instances/{instanceID}/abort")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "cancelEvent",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "PUT",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void(204, operations.CancelEventResponse$)
            .json("default", errors.ErrorT$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Create trigger
     *
     * @remarks
     * Create trigger
     */
    async createTrigger(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => shared.TriggerData$.outboundSchema.optional().parse(value$), "Input validation failed");
        const body$ = payload$ === undefined ? null : (0, encodings_1.encodeJSON)("body", payload$, { explode: true });
        const path$ = this.templateURLComponent("/api/orchestration/triggers")();
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "createTrigger",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(201, operations.CreateTriggerResponse$, { key: "CreateTriggerResponse" })
            .json("default", errors.ErrorT$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Create workflow
     *
     * @remarks
     * Create a workflow
     */
    async createWorkflow(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => shared.CreateWorkflowRequest$.outboundSchema.optional().parse(value$), "Input validation failed");
        const body$ = payload$ === undefined ? null : (0, encodings_1.encodeJSON)("body", payload$, { explode: true });
        const path$ = this.templateURLComponent("/api/orchestration/workflows")();
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "createWorkflow",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(201, operations.CreateWorkflowResponse$, { key: "CreateWorkflowResponse" })
            .json("default", errors.ErrorT$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Delete trigger
     *
     * @remarks
     * Read trigger
     */
    async deleteTrigger(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.DeleteTriggerRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            triggerID: (0, encodings_1.encodeSimple)("triggerID", payload$.triggerID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/orchestration/triggers/{triggerID}")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "deleteTrigger",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "DELETE",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void(204, operations.DeleteTriggerResponse$)
            .json("default", errors.ErrorT$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Delete a flow by id
     *
     * @remarks
     * Delete a flow by id
     */
    async deleteWorkflow(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.DeleteWorkflowRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            flowId: (0, encodings_1.encodeSimple)("flowId", payload$.flowId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/orchestration/workflows/{flowId}")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "deleteWorkflow",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "DELETE",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void(204, operations.DeleteWorkflowResponse$)
            .json("default", errors.ErrorT$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get a workflow instance by id
     *
     * @remarks
     * Get a workflow instance by id
     */
    async getInstance(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.GetInstanceRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            instanceID: (0, encodings_1.encodeSimple)("instanceID", payload$.instanceID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/orchestration/instances/{instanceID}")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "getInstance",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.GetInstanceResponse$, { key: "GetWorkflowInstanceResponse" })
            .json("default", errors.ErrorT$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get a workflow instance history by id
     *
     * @remarks
     * Get a workflow instance history by id
     */
    async getInstanceHistory(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.GetInstanceHistoryRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            instanceID: (0, encodings_1.encodeSimple)("instanceID", payload$.instanceID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/orchestration/instances/{instanceID}/history")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "getInstanceHistory",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.GetInstanceHistoryResponse$, {
            key: "GetWorkflowInstanceHistoryResponse",
        })
            .json("default", errors.ErrorT$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get a workflow instance stage history
     *
     * @remarks
     * Get a workflow instance stage history
     */
    async getInstanceStageHistory(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.GetInstanceStageHistoryRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            instanceID: (0, encodings_1.encodeSimple)("instanceID", payload$.instanceID, {
                explode: false,
                charEncoding: "percent",
            }),
            number: (0, encodings_1.encodeSimple)("number", payload$.number, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/orchestration/instances/{instanceID}/stages/{number}/history")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "getInstanceStageHistory",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.GetInstanceStageHistoryResponse$, {
            key: "GetWorkflowInstanceHistoryStageResponse",
        })
            .json("default", errors.ErrorT$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get a flow by id
     *
     * @remarks
     * Get a flow by id
     */
    async getWorkflow(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.GetWorkflowRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            flowId: (0, encodings_1.encodeSimple)("flowId", payload$.flowId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/orchestration/workflows/{flowId}")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "getWorkflow",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.GetWorkflowResponse$, { key: "GetWorkflowResponse" })
            .json("default", errors.ErrorT$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * List instances of a workflow
     *
     * @remarks
     * List instances of a workflow
     */
    async listInstances(request, options) {
        var _a;
        const input$ = typeof request === "undefined" ? {} : request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.ListInstancesRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const path$ = this.templateURLComponent("/api/orchestration/instances")();
        const query$ = (0, encodings_1.encodeFormQuery)({
            running: payload$.running,
            workflowID: payload$.workflowID,
        });
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "listInstances",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.ListInstancesResponse$, { key: "ListRunsResponse" })
            .json("default", errors.ErrorT$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * List triggers
     *
     * @remarks
     * List triggers
     */
    async listTriggers(request, options) {
        var _a;
        const input$ = typeof request === "undefined" ? {} : request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.ListTriggersRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const path$ = this.templateURLComponent("/api/orchestration/triggers")();
        const query$ = (0, encodings_1.encodeFormQuery)({
            name: payload$.name,
        });
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "listTriggers",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.ListTriggersResponse$, { key: "ListTriggersResponse" })
            .json("default", errors.ErrorT$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * List triggers occurrences
     *
     * @remarks
     * List triggers occurrences
     */
    async listTriggersOccurrences(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.ListTriggersOccurrencesRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            triggerID: (0, encodings_1.encodeSimple)("triggerID", payload$.triggerID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/orchestration/triggers/{triggerID}/occurrences")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "listTriggersOccurrences",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.ListTriggersOccurrencesResponse$, {
            key: "ListTriggersOccurrencesResponse",
        })
            .json("default", errors.ErrorT$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * List registered workflows
     *
     * @remarks
     * List registered workflows
     */
    async listWorkflows(options) {
        var _a;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const path$ = this.templateURLComponent("/api/orchestration/workflows")();
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "listWorkflows",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.ListWorkflowsResponse$, { key: "ListWorkflowsResponse" })
            .json("default", errors.ErrorT$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get server info
     */
    async orchestrationgetServerInfo(options) {
        var _a;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const path$ = this.templateURLComponent("/api/orchestration/_info")();
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "orchestrationgetServerInfo",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.OrchestrationgetServerInfoResponse$, { key: "ServerInfo" })
            .json("default", errors.ErrorT$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Read trigger
     *
     * @remarks
     * Read trigger
     */
    async readTrigger(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.ReadTriggerRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            triggerID: (0, encodings_1.encodeSimple)("triggerID", payload$.triggerID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/orchestration/triggers/{triggerID}")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "readTrigger",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.ReadTriggerResponse$, { key: "ReadTriggerResponse" })
            .json("default", errors.ErrorT$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Run workflow
     *
     * @remarks
     * Run workflow
     */
    async runWorkflow(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.RunWorkflowRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_1.encodeJSON)("body", payload$.RequestBody, { explode: true });
        const pathParams$ = {
            workflowID: (0, encodings_1.encodeSimple)("workflowID", payload$.workflowID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/orchestration/workflows/{workflowID}/instances")(pathParams$);
        const query$ = (0, encodings_1.encodeFormQuery)({
            wait: payload$.wait,
        });
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "runWorkflow",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(201, operations.RunWorkflowResponse$, { key: "RunWorkflowResponse" })
            .json("default", errors.ErrorT$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Send an event to a running workflow
     *
     * @remarks
     * Send an event to a running workflow
     */
    async sendEvent(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.SendEventRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_1.encodeJSON)("body", payload$.RequestBody, { explode: true });
        const pathParams$ = {
            instanceID: (0, encodings_1.encodeSimple)("instanceID", payload$.instanceID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/orchestration/instances/{instanceID}/events")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "sendEvent",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void(204, operations.SendEventResponse$)
            .json("default", errors.ErrorT$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Test trigger
     *
     * @remarks
     * Test trigger
     */
    async testTrigger(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.TestTriggerRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_1.encodeJSON)("body", payload$.RequestBody, { explode: true });
        const pathParams$ = {
            triggerID: (0, encodings_1.encodeSimple)("triggerID", payload$.triggerID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/orchestration/v2/triggers/{triggerID}/test")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "testTrigger",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.TestTriggerResponse$, { key: "V2TestTriggerResponse" })
            .json("default", errors.V2Error$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Cancel a running workflow
     *
     * @remarks
     * Cancel a running workflow
     */
    async v2CancelEvent(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2CancelEventRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            instanceID: (0, encodings_1.encodeSimple)("instanceID", payload$.instanceID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/orchestration/v2/instances/{instanceID}/abort")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2CancelEvent",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "PUT",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void(204, operations.V2CancelEventResponse$)
            .json("default", errors.V2Error$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Create trigger
     *
     * @remarks
     * Create trigger
     */
    async v2CreateTrigger(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => shared.V2TriggerData$.outboundSchema.optional().parse(value$), "Input validation failed");
        const body$ = payload$ === undefined ? null : (0, encodings_1.encodeJSON)("body", payload$, { explode: true });
        const path$ = this.templateURLComponent("/api/orchestration/v2/triggers")();
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2CreateTrigger",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(201, operations.V2CreateTriggerResponse$, { key: "V2CreateTriggerResponse" })
            .json("default", errors.V2Error$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Create workflow
     *
     * @remarks
     * Create a workflow
     */
    async v2CreateWorkflow(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => shared.V2CreateWorkflowRequest$.outboundSchema.optional().parse(value$), "Input validation failed");
        const body$ = payload$ === undefined ? null : (0, encodings_1.encodeJSON)("body", payload$, { explode: true });
        const path$ = this.templateURLComponent("/api/orchestration/v2/workflows")();
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2CreateWorkflow",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(201, operations.V2CreateWorkflowResponse$, { key: "V2CreateWorkflowResponse" })
            .json("default", errors.V2Error$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Delete trigger
     *
     * @remarks
     * Read trigger
     */
    async v2DeleteTrigger(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2DeleteTriggerRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            triggerID: (0, encodings_1.encodeSimple)("triggerID", payload$.triggerID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/orchestration/v2/triggers/{triggerID}")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2DeleteTrigger",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "DELETE",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void(204, operations.V2DeleteTriggerResponse$)
            .json("default", errors.V2Error$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Delete a flow by id
     *
     * @remarks
     * Delete a flow by id
     */
    async v2DeleteWorkflow(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2DeleteWorkflowRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            flowId: (0, encodings_1.encodeSimple)("flowId", payload$.flowId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/orchestration/v2/workflows/{flowId}")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2DeleteWorkflow",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "DELETE",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void(204, operations.V2DeleteWorkflowResponse$)
            .json("default", errors.V2Error$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get a workflow instance by id
     *
     * @remarks
     * Get a workflow instance by id
     */
    async v2GetInstance(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2GetInstanceRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            instanceID: (0, encodings_1.encodeSimple)("instanceID", payload$.instanceID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/orchestration/v2/instances/{instanceID}")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2GetInstance",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.V2GetInstanceResponse$, { key: "V2GetWorkflowInstanceResponse" })
            .json("default", errors.V2Error$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get a workflow instance history by id
     *
     * @remarks
     * Get a workflow instance history by id
     */
    async v2GetInstanceHistory(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2GetInstanceHistoryRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            instanceID: (0, encodings_1.encodeSimple)("instanceID", payload$.instanceID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/orchestration/v2/instances/{instanceID}/history")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2GetInstanceHistory",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.V2GetInstanceHistoryResponse$, {
            key: "V2GetWorkflowInstanceHistoryResponse",
        })
            .json("default", errors.V2Error$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get a workflow instance stage history
     *
     * @remarks
     * Get a workflow instance stage history
     */
    async v2GetInstanceStageHistory(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2GetInstanceStageHistoryRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            instanceID: (0, encodings_1.encodeSimple)("instanceID", payload$.instanceID, {
                explode: false,
                charEncoding: "percent",
            }),
            number: (0, encodings_1.encodeSimple)("number", payload$.number, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/orchestration/v2/instances/{instanceID}/stages/{number}/history")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2GetInstanceStageHistory",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.V2GetInstanceStageHistoryResponse$, {
            key: "V2GetWorkflowInstanceHistoryStageResponse",
        })
            .json("default", errors.V2Error$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get server info
     */
    async v2GetServerInfo(options) {
        var _a;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const path$ = this.templateURLComponent("/api/orchestration/v2/_info")();
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2GetServerInfo",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.V2GetServerInfoResponse$, { key: "V2ServerInfo" })
            .json("default", errors.V2Error$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get a flow by id
     *
     * @remarks
     * Get a flow by id
     */
    async v2GetWorkflow(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2GetWorkflowRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            flowId: (0, encodings_1.encodeSimple)("flowId", payload$.flowId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/orchestration/v2/workflows/{flowId}")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2GetWorkflow",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.V2GetWorkflowResponse$, { key: "V2GetWorkflowResponse" })
            .json("default", errors.V2Error$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * List instances of a workflow
     *
     * @remarks
     * List instances of a workflow
     */
    async v2ListInstances(request, options) {
        var _a;
        const input$ = typeof request === "undefined" ? {} : request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2ListInstancesRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const path$ = this.templateURLComponent("/api/orchestration/v2/instances")();
        const query$ = (0, encodings_1.encodeFormQuery)({
            cursor: payload$.cursor,
            pageSize: payload$.pageSize,
            running: payload$.running,
            workflowID: payload$.workflowID,
        });
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2ListInstances",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.V2ListInstancesResponse$, { key: "V2ListRunsResponse" })
            .json("default", errors.V2Error$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * List triggers
     *
     * @remarks
     * List triggers
     */
    async v2ListTriggers(request, options) {
        var _a;
        const input$ = typeof request === "undefined" ? {} : request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2ListTriggersRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const path$ = this.templateURLComponent("/api/orchestration/v2/triggers")();
        const query$ = (0, encodings_1.encodeFormQuery)({
            name: payload$.name,
            pageSize: payload$.pageSize,
            cursor: payload$.cursor,
        });
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2ListTriggers",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.V2ListTriggersResponse$, { key: "V2ListTriggersResponse" })
            .json("default", errors.V2Error$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * List triggers occurrences
     *
     * @remarks
     * List triggers occurrences
     */
    async v2ListTriggersOccurrences(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2ListTriggersOccurrencesRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            triggerID: (0, encodings_1.encodeSimple)("triggerID", payload$.triggerID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/orchestration/v2/triggers/{triggerID}/occurrences")(pathParams$);
        const query$ = (0, encodings_1.encodeFormQuery)({
            pageSize: payload$.pageSize,
            cursor: payload$.cursor,
        });
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2ListTriggersOccurrences",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.V2ListTriggersOccurrencesResponse$, {
            key: "V2ListTriggersOccurrencesResponse",
        })
            .json("default", errors.V2Error$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * List registered workflows
     *
     * @remarks
     * List registered workflows
     */
    async v2ListWorkflows(request, options) {
        var _a;
        const input$ = typeof request === "undefined" ? {} : request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2ListWorkflowsRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const path$ = this.templateURLComponent("/api/orchestration/v2/workflows")();
        const query$ = (0, encodings_1.encodeFormQuery)({
            cursor: payload$.cursor,
            pageSize: payload$.pageSize,
        });
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2ListWorkflows",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.V2ListWorkflowsResponse$, { key: "V2ListWorkflowsResponse" })
            .json("default", errors.V2Error$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Read trigger
     *
     * @remarks
     * Read trigger
     */
    async v2ReadTrigger(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2ReadTriggerRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            triggerID: (0, encodings_1.encodeSimple)("triggerID", payload$.triggerID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/orchestration/v2/triggers/{triggerID}")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2ReadTrigger",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.V2ReadTriggerResponse$, { key: "V2ReadTriggerResponse" })
            .json("default", errors.V2Error$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Run workflow
     *
     * @remarks
     * Run workflow
     */
    async v2RunWorkflow(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2RunWorkflowRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_1.encodeJSON)("body", payload$.RequestBody, { explode: true });
        const pathParams$ = {
            workflowID: (0, encodings_1.encodeSimple)("workflowID", payload$.workflowID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/orchestration/v2/workflows/{workflowID}/instances")(pathParams$);
        const query$ = (0, encodings_1.encodeFormQuery)({
            wait: payload$.wait,
        });
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2RunWorkflow",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(201, operations.V2RunWorkflowResponse$, { key: "V2RunWorkflowResponse" })
            .json("default", errors.V2Error$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Send an event to a running workflow
     *
     * @remarks
     * Send an event to a running workflow
     */
    async v2SendEvent(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.V2SendEventRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_1.encodeJSON)("body", payload$.RequestBody, { explode: true });
        const pathParams$ = {
            instanceID: (0, encodings_1.encodeSimple)("instanceID", payload$.instanceID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/orchestration/v2/instances/{instanceID}/events")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "v2SendEvent",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void(204, operations.V2SendEventResponse$)
            .json("default", errors.V2Error$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
}
exports.Orchestration = Orchestration;
//# sourceMappingURL=orchestration.js.map
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Auth = void 0;
const hooks_1 = require("../hooks");
const config_1 = require("../lib/config");
const encodings_1 = require("../lib/encodings");
const http_1 = require("../lib/http");
const schemas$ = __importStar(require("../lib/schemas"));
const sdks_1 = require("../lib/sdks");
const operations = __importStar(require("./models/operations"));
const shared = __importStar(require("./models/shared"));
class Auth extends sdks_1.ClientSDK {
    constructor(options = {}) {
        const opt = options;
        let hooks;
        if (typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof hooks_1.SDKHooks) {
            hooks = opt.hooks;
        }
        else {
            hooks = new hooks_1.SDKHooks();
        }
        super({
            client: options.httpClient || new http_1.HTTPClient(),
            baseURL: (0, config_1.serverURLFromOptions)(options),
            hooks,
        });
        this.options$ = { ...options, hooks };
        void this.options$;
    }
    /**
     * Create client
     */
    async createClient(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => shared.CreateClientRequest$.outboundSchema.optional().parse(value$), "Input validation failed");
        const body$ = payload$ === undefined ? null : (0, encodings_1.encodeJSON)("body", payload$, { explode: true });
        const path$ = this.templateURLComponent("/api/auth/clients")();
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "createClient",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(201, operations.CreateClientResponse$, { key: "CreateClientResponse" })
            .fail("default")
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Add a secret to a client
     */
    async createSecret(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.CreateSecretRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_1.encodeJSON)("body", payload$.CreateSecretRequest, { explode: true });
        const pathParams$ = {
            clientId: (0, encodings_1.encodeSimple)("clientId", payload$.clientId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/auth/clients/{clientId}/secrets")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "createSecret",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.CreateSecretResponse$, { key: "CreateSecretResponse" })
            .fail("default")
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Delete client
     */
    async deleteClient(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");
        const payload$ = schemas$.parse(input$, (value$) => operations.DeleteClientRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            clientId: (0, encodings_1.encodeSimple)("clientId", payload$.clientId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/auth/clients/{clientId}")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "deleteClient",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "DELETE",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void(204, operations.DeleteClientResponse$)
            .fail("default")
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Delete a secret from a client
     */
    async deleteSecret(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");
        const payload$ = schemas$.parse(input$, (value$) => operations.DeleteSecretRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            clientId: (0, encodings_1.encodeSimple)("clientId", payload$.clientId, {
                explode: false,
                charEncoding: "percent",
            }),
            secretId: (0, encodings_1.encodeSimple)("secretId", payload$.secretId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/auth/clients/{clientId}/secrets/{secretId}")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "deleteSecret",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "DELETE",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void(204, operations.DeleteSecretResponse$)
            .fail("default")
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * List clients
     */
    async listClients(options) {
        var _a;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const path$ = this.templateURLComponent("/api/auth/clients")();
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "listClients",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.ListClientsResponse$, { key: "ListClientsResponse" })
            .fail("default")
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * List users
     *
     * @remarks
     * List users
     */
    async listUsers(options) {
        var _a;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const path$ = this.templateURLComponent("/api/auth/users")();
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "listUsers",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.ListUsersResponse$, { key: "ListUsersResponse" })
            .fail("default")
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Read client
     */
    async readClient(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.ReadClientRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            clientId: (0, encodings_1.encodeSimple)("clientId", payload$.clientId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/auth/clients/{clientId}")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "readClient",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.ReadClientResponse$, { key: "ReadClientResponse" })
            .fail("default")
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Read user
     *
     * @remarks
     * Read user
     */
    async readUser(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.ReadUserRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            userId: (0, encodings_1.encodeSimple)("userId", payload$.userId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/auth/users/{userId}")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "readUser",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.ReadUserResponse$, { key: "ReadUserResponse" })
            .fail("default")
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Update client
     */
    async updateClient(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.UpdateClientRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_1.encodeJSON)("body", payload$.UpdateClientRequest, { explode: true });
        const pathParams$ = {
            clientId: (0, encodings_1.encodeSimple)("clientId", payload$.clientId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/auth/clients/{clientId}")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "updateClient",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "PUT",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.UpdateClientResponse$, { key: "UpdateClientResponse" })
            .fail("default")
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
}
exports.Auth = Auth;
//# sourceMappingURL=auth.js.map
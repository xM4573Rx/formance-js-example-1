import { SDKOptions } from "../lib/config";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as operations from "./models/operations";
export declare class Ledger extends ClientSDK {
    private readonly options$;
    constructor(options?: SDKOptions);
    /**
     * Create a new batch of transactions to a ledger
     */
    createTransactions(request: operations.CreateTransactionsRequest, options?: RequestOptions): Promise<operations.CreateTransactionsResponse>;
    /**
     * Set the metadata of a transaction by its ID
     */
    addMetadataOnTransaction(request: operations.AddMetadataOnTransactionRequest, options?: RequestOptions): Promise<operations.AddMetadataOnTransactionResponse>;
    /**
     * Add metadata to an account
     */
    addMetadataToAccount(request: operations.AddMetadataToAccountRequest, options?: RequestOptions): Promise<operations.AddMetadataToAccountResponse>;
    /**
     * Count the accounts from a ledger
     */
    countAccounts(request: operations.CountAccountsRequest, options?: RequestOptions): Promise<operations.CountAccountsResponse>;
    /**
     * Count the transactions from a ledger
     */
    countTransactions(request: operations.CountTransactionsRequest, options?: RequestOptions): Promise<operations.CountTransactionsResponse>;
    /**
     * Create a new transaction to a ledger
     */
    createTransaction(request: operations.CreateTransactionRequest, options?: RequestOptions): Promise<operations.CreateTransactionResponse>;
    /**
     * Get account by its address
     */
    getAccount(request: operations.GetAccountRequest, options?: RequestOptions): Promise<operations.GetAccountResponse>;
    /**
     * Get the balances from a ledger's account
     */
    getBalances(request: operations.GetBalancesRequest, options?: RequestOptions): Promise<operations.GetBalancesResponse>;
    /**
     * Get the aggregated balances from selected accounts
     */
    getBalancesAggregated(request: operations.GetBalancesAggregatedRequest, options?: RequestOptions): Promise<operations.GetBalancesAggregatedResponse>;
    /**
     * Show server information
     */
    getInfo(options?: RequestOptions): Promise<operations.GetInfoResponse>;
    /**
     * Get information about a ledger
     */
    getLedgerInfo(request: operations.GetLedgerInfoRequest, options?: RequestOptions): Promise<operations.GetLedgerInfoResponse>;
    /**
     * Get the mapping of a ledger
     */
    getMapping(request: operations.GetMappingRequest, options?: RequestOptions): Promise<operations.GetMappingResponse>;
    /**
     * Get transaction from a ledger by its ID
     */
    getTransaction(request: operations.GetTransactionRequest, options?: RequestOptions): Promise<operations.GetTransactionResponse>;
    /**
     * List accounts from a ledger
     *
     * @remarks
     * List accounts from a ledger, sorted by address in descending order.
     */
    listAccounts(request: operations.ListAccountsRequest, options?: RequestOptions): Promise<operations.ListAccountsResponse>;
    /**
     * List the logs from a ledger
     *
     * @remarks
     * List the logs from a ledger, sorted by ID in descending order.
     */
    listLogs(request: operations.ListLogsRequest, options?: RequestOptions): Promise<operations.ListLogsResponse>;
    /**
     * List transactions from a ledger
     *
     * @remarks
     * List transactions from a ledger, sorted by txid in descending order.
     */
    listTransactions(request: operations.ListTransactionsRequest, options?: RequestOptions): Promise<operations.ListTransactionsResponse>;
    /**
     * Get statistics from a ledger
     *
     * @remarks
     * Get statistics from a ledger. (aggregate metrics on accounts and transactions)
     *
     */
    readStats(request: operations.ReadStatsRequest, options?: RequestOptions): Promise<operations.ReadStatsResponse>;
    /**
     * Revert a ledger transaction by its ID
     */
    revertTransaction(request: operations.RevertTransactionRequest, options?: RequestOptions): Promise<operations.RevertTransactionResponse>;
    /**
     * Execute a Numscript
     *
     * @remarks
     * This route is deprecated, and has been merged into `POST /{ledger}/transactions`.
     *
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    runScript(request: operations.RunScriptRequest, options?: RequestOptions): Promise<operations.RunScriptResponse>;
    /**
     * Update the mapping of a ledger
     */
    updateMapping(request: operations.UpdateMappingRequest, options?: RequestOptions): Promise<operations.UpdateMappingResponse>;
    /**
     * Set the metadata of a transaction by its ID
     */
    v2AddMetadataOnTransaction(request: operations.V2AddMetadataOnTransactionRequest, options?: RequestOptions): Promise<operations.V2AddMetadataOnTransactionResponse>;
    /**
     * Add metadata to an account
     */
    v2AddMetadataToAccount(request: operations.V2AddMetadataToAccountRequest, options?: RequestOptions): Promise<operations.V2AddMetadataToAccountResponse>;
    /**
     * Count the accounts from a ledger
     */
    v2CountAccounts(request: operations.V2CountAccountsRequest, options?: RequestOptions): Promise<operations.V2CountAccountsResponse>;
    /**
     * Count the transactions from a ledger
     */
    v2CountTransactions(request: operations.V2CountTransactionsRequest, options?: RequestOptions): Promise<operations.V2CountTransactionsResponse>;
    /**
     * Bulk request
     */
    v2CreateBulk(request: operations.V2CreateBulkRequest, options?: RequestOptions): Promise<operations.V2CreateBulkResponse>;
    /**
     * Create a ledger
     */
    v2CreateLedger(request: operations.V2CreateLedgerRequest, options?: RequestOptions): Promise<operations.V2CreateLedgerResponse>;
    /**
     * Create a new transaction to a ledger
     */
    v2CreateTransaction(request: operations.V2CreateTransactionRequest, options?: RequestOptions): Promise<operations.V2CreateTransactionResponse>;
    /**
     * Delete metadata by key
     *
     * @remarks
     * Delete metadata by key
     */
    v2DeleteAccountMetadata(request: operations.V2DeleteAccountMetadataRequest, options?: RequestOptions): Promise<operations.V2DeleteAccountMetadataResponse>;
    /**
     * Delete ledger metadata by key
     */
    v2DeleteLedgerMetadata(request: operations.V2DeleteLedgerMetadataRequest, options?: RequestOptions): Promise<operations.V2DeleteLedgerMetadataResponse>;
    /**
     * Delete metadata by key
     *
     * @remarks
     * Delete metadata by key
     */
    v2DeleteTransactionMetadata(request: operations.V2DeleteTransactionMetadataRequest, options?: RequestOptions): Promise<operations.V2DeleteTransactionMetadataResponse>;
    /**
     * Get account by its address
     */
    v2GetAccount(request: operations.V2GetAccountRequest, options?: RequestOptions): Promise<operations.V2GetAccountResponse>;
    /**
     * Get the aggregated balances from selected accounts
     */
    v2GetBalancesAggregated(request: operations.V2GetBalancesAggregatedRequest, options?: RequestOptions): Promise<operations.V2GetBalancesAggregatedResponse>;
    /**
     * Show server information
     */
    v2GetInfo(options?: RequestOptions): Promise<operations.V2GetInfoResponse>;
    /**
     * Get a ledger
     */
    v2GetLedger(request: operations.V2GetLedgerRequest, options?: RequestOptions): Promise<operations.V2GetLedgerResponse>;
    /**
     * Get information about a ledger
     */
    v2GetLedgerInfo(request: operations.V2GetLedgerInfoRequest, options?: RequestOptions): Promise<operations.V2GetLedgerInfoResponse>;
    /**
     * Get transaction from a ledger by its ID
     */
    v2GetTransaction(request: operations.V2GetTransactionRequest, options?: RequestOptions): Promise<operations.V2GetTransactionResponse>;
    /**
     * Get list of volumes with balances for (account/asset)
     */
    v2GetVolumesWithBalances(request: operations.V2GetVolumesWithBalancesRequest, options?: RequestOptions): Promise<operations.V2GetVolumesWithBalancesResponse>;
    /**
     * List accounts from a ledger
     *
     * @remarks
     * List accounts from a ledger, sorted by address in descending order.
     */
    v2ListAccounts(request: operations.V2ListAccountsRequest, options?: RequestOptions): Promise<operations.V2ListAccountsResponse>;
    /**
     * List ledgers
     */
    v2ListLedgers(request: operations.V2ListLedgersRequest, options?: RequestOptions): Promise<operations.V2ListLedgersResponse>;
    /**
     * List the logs from a ledger
     *
     * @remarks
     * List the logs from a ledger, sorted by ID in descending order.
     */
    v2ListLogs(request: operations.V2ListLogsRequest, options?: RequestOptions): Promise<operations.V2ListLogsResponse>;
    /**
     * List transactions from a ledger
     *
     * @remarks
     * List transactions from a ledger, sorted by id in descending order.
     */
    v2ListTransactions(request: operations.V2ListTransactionsRequest, options?: RequestOptions): Promise<operations.V2ListTransactionsResponse>;
    /**
     * Get statistics from a ledger
     *
     * @remarks
     * Get statistics from a ledger. (aggregate metrics on accounts and transactions)
     *
     */
    v2ReadStats(request: operations.V2ReadStatsRequest, options?: RequestOptions): Promise<operations.V2ReadStatsResponse>;
    /**
     * Revert a ledger transaction by its ID
     */
    v2RevertTransaction(request: operations.V2RevertTransactionRequest, options?: RequestOptions): Promise<operations.V2RevertTransactionResponse>;
    /**
     * Update ledger metadata
     */
    v2UpdateLedgerMetadata(request: operations.V2UpdateLedgerMetadataRequest, options?: RequestOptions): Promise<operations.V2UpdateLedgerMetadataResponse>;
}
//# sourceMappingURL=ledger.d.ts.map
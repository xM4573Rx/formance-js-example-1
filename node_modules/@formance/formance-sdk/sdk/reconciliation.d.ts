import { SDKOptions } from "../lib/config";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
export declare class Reconciliation extends ClientSDK {
    private readonly options$;
    constructor(options?: SDKOptions);
    /**
     * Create a policy
     *
     * @remarks
     * Create a policy
     */
    createPolicy(request: shared.PolicyRequest, options?: RequestOptions): Promise<operations.CreatePolicyResponse>;
    /**
     * Delete a policy
     *
     * @remarks
     * Delete a policy by its id.
     */
    deletePolicy(request: operations.DeletePolicyRequest, options?: RequestOptions): Promise<operations.DeletePolicyResponse>;
    /**
     * Get a policy
     */
    getPolicy(request: operations.GetPolicyRequest, options?: RequestOptions): Promise<operations.GetPolicyResponse>;
    /**
     * Get a reconciliation
     */
    getReconciliation(request: operations.GetReconciliationRequest, options?: RequestOptions): Promise<operations.GetReconciliationResponse>;
    /**
     * List policies
     */
    listPolicies(request: operations.ListPoliciesRequest, options?: RequestOptions): Promise<operations.ListPoliciesResponse>;
    /**
     * List reconciliations
     */
    listReconciliations(request: operations.ListReconciliationsRequest, options?: RequestOptions): Promise<operations.ListReconciliationsResponse>;
    /**
     * Reconcile using a policy
     *
     * @remarks
     * Reconcile using a policy
     */
    reconcile(request: operations.ReconcileRequest, options?: RequestOptions): Promise<operations.ReconcileResponse>;
    /**
     * Get server info
     */
    reconciliationgetServerInfo(options?: RequestOptions): Promise<operations.ReconciliationgetServerInfoResponse>;
}
//# sourceMappingURL=reconciliation.d.ts.map
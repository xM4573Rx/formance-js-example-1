import { SDKOptions } from "../lib/config";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
export declare class Payments extends ClientSDK {
    private readonly options$;
    constructor(options?: SDKOptions);
    /**
     * Add an account to a pool
     *
     * @remarks
     * Add an account to a pool
     */
    addAccountToPool(request: operations.AddAccountToPoolRequest, options?: RequestOptions): Promise<operations.AddAccountToPoolResponse>;
    /**
     * Transfer funds between Connector accounts
     *
     * @remarks
     * Execute a transfer between two accounts.
     */
    connectorsTransfer(request: operations.ConnectorsTransferRequest, options?: RequestOptions): Promise<operations.ConnectorsTransferResponse>;
    /**
     * Create an account
     *
     * @remarks
     * Create an account
     */
    createAccount(request: shared.AccountRequest, options?: RequestOptions): Promise<operations.CreateAccountResponse>;
    /**
     * Create a BankAccount in Payments and on the PSP
     *
     * @remarks
     * Create a bank account in Payments and on the PSP.
     */
    createBankAccount(request: shared.BankAccountRequest, options?: RequestOptions): Promise<operations.CreateBankAccountResponse>;
    /**
     * Create a payment
     *
     * @remarks
     * Create a payment
     */
    createPayment(request: shared.PaymentRequest, options?: RequestOptions): Promise<operations.CreatePaymentResponse>;
    /**
     * Create a Pool
     *
     * @remarks
     * Create a Pool
     */
    createPool(request: shared.PoolRequest, options?: RequestOptions): Promise<operations.CreatePoolResponse>;
    /**
     * Create a TransferInitiation
     *
     * @remarks
     * Create a transfer initiation
     */
    createTransferInitiation(request: shared.TransferInitiationRequest, options?: RequestOptions): Promise<operations.CreateTransferInitiationResponse>;
    /**
     * Delete a Pool
     *
     * @remarks
     * Delete a pool by its id.
     */
    deletePool(request: operations.DeletePoolRequest, options?: RequestOptions): Promise<operations.DeletePoolResponse>;
    /**
     * Delete a transfer initiation
     *
     * @remarks
     * Delete a transfer initiation by its id.
     */
    deleteTransferInitiation(request: operations.DeleteTransferInitiationRequest, options?: RequestOptions): Promise<operations.DeleteTransferInitiationResponse>;
    /**
     * Forward a bank account to a connector
     */
    forwardBankAccount(request: operations.ForwardBankAccountRequest, options?: RequestOptions): Promise<operations.ForwardBankAccountResponse>;
    /**
     * Get account balances
     */
    getAccountBalances(request: operations.GetAccountBalancesRequest, options?: RequestOptions): Promise<operations.GetAccountBalancesResponse>;
    /**
     * Get a bank account created by user on Formance
     */
    getBankAccount(request: operations.GetBankAccountRequest, options?: RequestOptions): Promise<operations.GetBankAccountResponse>;
    /**
     * Read a specific task of the connector
     *
     * @remarks
     * Get a specific task associated to the connector.
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    getConnectorTask(request: operations.GetConnectorTaskRequest, options?: RequestOptions): Promise<operations.GetConnectorTaskResponse>;
    /**
     * Read a specific task of the connector
     *
     * @remarks
     * Get a specific task associated to the connector.
     */
    getConnectorTaskV1(request: operations.GetConnectorTaskV1Request, options?: RequestOptions): Promise<operations.GetConnectorTaskV1Response>;
    /**
     * Get a payment
     */
    getPayment(request: operations.GetPaymentRequest, options?: RequestOptions): Promise<operations.GetPaymentResponse>;
    /**
     * Get a Pool
     */
    getPool(request: operations.GetPoolRequest, options?: RequestOptions): Promise<operations.GetPoolResponse>;
    /**
     * Get pool balances
     */
    getPoolBalances(request: operations.GetPoolBalancesRequest, options?: RequestOptions): Promise<operations.GetPoolBalancesResponse>;
    /**
     * Get a transfer initiation
     */
    getTransferInitiation(request: operations.GetTransferInitiationRequest, options?: RequestOptions): Promise<operations.GetTransferInitiationResponse>;
    /**
     * Install a connector
     *
     * @remarks
     * Install a connector by its name and config.
     */
    installConnector(request: operations.InstallConnectorRequest, options?: RequestOptions): Promise<operations.InstallConnectorResponse>;
    /**
     * List all installed connectors
     *
     * @remarks
     * List all installed connectors.
     */
    listAllConnectors(options?: RequestOptions): Promise<operations.ListAllConnectorsResponse>;
    /**
     * List bank accounts created by user on Formance
     *
     * @remarks
     * List all bank accounts created by user on Formance.
     */
    listBankAccounts(request: operations.ListBankAccountsRequest, options?: RequestOptions): Promise<operations.ListBankAccountsResponse>;
    /**
     * List the configs of each available connector
     *
     * @remarks
     * List the configs of each available connector.
     */
    listConfigsAvailableConnectors(options?: RequestOptions): Promise<operations.ListConfigsAvailableConnectorsResponse>;
    /**
     * List tasks from a connector
     *
     * @remarks
     * List all tasks associated with this connector.
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    listConnectorTasks(request: operations.ListConnectorTasksRequest, options?: RequestOptions): Promise<operations.ListConnectorTasksResponse>;
    /**
     * List tasks from a connector
     *
     * @remarks
     * List all tasks associated with this connector.
     */
    listConnectorTasksV1(request: operations.ListConnectorTasksV1Request, options?: RequestOptions): Promise<operations.ListConnectorTasksV1Response>;
    /**
     * List payments
     */
    listPayments(request: operations.ListPaymentsRequest, options?: RequestOptions): Promise<operations.ListPaymentsResponse>;
    /**
     * List Pools
     */
    listPools(request: operations.ListPoolsRequest, options?: RequestOptions): Promise<operations.ListPoolsResponse>;
    /**
     * List Transfer Initiations
     */
    listTransferInitiations(request: operations.ListTransferInitiationsRequest, options?: RequestOptions): Promise<operations.ListTransferInitiationsResponse>;
    /**
     * Get an account
     */
    paymentsgetAccount(request: operations.PaymentsgetAccountRequest, options?: RequestOptions): Promise<operations.PaymentsgetAccountResponse>;
    /**
     * Get server info
     */
    paymentsgetServerInfo(options?: RequestOptions): Promise<operations.PaymentsgetServerInfoResponse>;
    /**
     * List accounts
     */
    paymentslistAccounts(request: operations.PaymentslistAccountsRequest, options?: RequestOptions): Promise<operations.PaymentslistAccountsResponse>;
    /**
     * Read the config of a connector
     *
     * @remarks
     * Read connector config
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    readConnectorConfig(request: operations.ReadConnectorConfigRequest, options?: RequestOptions): Promise<operations.ReadConnectorConfigResponse>;
    /**
     * Read the config of a connector
     *
     * @remarks
     * Read connector config
     */
    readConnectorConfigV1(request: operations.ReadConnectorConfigV1Request, options?: RequestOptions): Promise<operations.ReadConnectorConfigV1Response>;
    /**
     * Remove an account from a pool
     *
     * @remarks
     * Remove an account from a pool by its id.
     */
    removeAccountFromPool(request: operations.RemoveAccountFromPoolRequest, options?: RequestOptions): Promise<operations.RemoveAccountFromPoolResponse>;
    /**
     * Reset a connector
     *
     * @remarks
     * Reset a connector by its name.
     * It will remove the connector and ALL PAYMENTS generated with it.
     *
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    resetConnector(request: operations.ResetConnectorRequest, options?: RequestOptions): Promise<operations.ResetConnectorResponse>;
    /**
     * Reset a connector
     *
     * @remarks
     * Reset a connector by its name.
     * It will remove the connector and ALL PAYMENTS generated with it.
     *
     */
    resetConnectorV1(request: operations.ResetConnectorV1Request, options?: RequestOptions): Promise<operations.ResetConnectorV1Response>;
    /**
     * Retry a failed transfer initiation
     *
     * @remarks
     * Retry a failed transfer initiation
     */
    retryTransferInitiation(request: operations.RetryTransferInitiationRequest, options?: RequestOptions): Promise<operations.RetryTransferInitiationResponse>;
    /**
     * Reverse a transfer initiation
     *
     * @remarks
     * Reverse transfer initiation
     */
    reverseTransferInitiation(request: operations.ReverseTransferInitiationRequest, options?: RequestOptions): Promise<operations.ReverseTransferInitiationResponse>;
    /**
     * Update the status of a transfer initiation
     *
     * @remarks
     * Update a transfer initiation status
     */
    udpateTransferInitiationStatus(request: operations.UdpateTransferInitiationStatusRequest, options?: RequestOptions): Promise<operations.UdpateTransferInitiationStatusResponse>;
    /**
     * Uninstall a connector
     *
     * @remarks
     * Uninstall a connector by its name.
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    uninstallConnector(request: operations.UninstallConnectorRequest, options?: RequestOptions): Promise<operations.UninstallConnectorResponse>;
    /**
     * Uninstall a connector
     *
     * @remarks
     * Uninstall a connector by its name.
     */
    uninstallConnectorV1(request: operations.UninstallConnectorV1Request, options?: RequestOptions): Promise<operations.UninstallConnectorV1Response>;
    /**
     * Update metadata of a bank account
     */
    updateBankAccountMetadata(request: operations.UpdateBankAccountMetadataRequest, options?: RequestOptions): Promise<operations.UpdateBankAccountMetadataResponse>;
    /**
     * Update the config of a connector
     *
     * @remarks
     * Update connector config
     */
    updateConnectorConfigV1(request: operations.UpdateConnectorConfigV1Request, options?: RequestOptions): Promise<operations.UpdateConnectorConfigV1Response>;
    /**
     * Update metadata
     */
    updateMetadata(request: operations.UpdateMetadataRequest, options?: RequestOptions): Promise<operations.UpdateMetadataResponse>;
}
//# sourceMappingURL=payments.d.ts.map
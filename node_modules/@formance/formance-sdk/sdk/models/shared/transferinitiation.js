"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferInitiation$ = exports.TransferInitiationType$ = exports.TransferInitiationType = void 0;
const transferinitiationadjusments_1 = require("./transferinitiationadjusments");
const transferinitiationpayments_1 = require("./transferinitiationpayments");
const transferinitiationstatus_1 = require("./transferinitiationstatus");
const z = __importStar(require("zod"));
var TransferInitiationType;
(function (TransferInitiationType) {
    TransferInitiationType["Transfer"] = "TRANSFER";
    TransferInitiationType["Payout"] = "PAYOUT";
})(TransferInitiationType || (exports.TransferInitiationType = TransferInitiationType = {}));
/** @internal */
var TransferInitiationType$;
(function (TransferInitiationType$) {
    TransferInitiationType$.inboundSchema = z.nativeEnum(TransferInitiationType);
    TransferInitiationType$.outboundSchema = TransferInitiationType$.inboundSchema;
})(TransferInitiationType$ || (exports.TransferInitiationType$ = TransferInitiationType$ = {}));
/** @internal */
var TransferInitiation$;
(function (TransferInitiation$) {
    TransferInitiation$.inboundSchema = z.object({
        amount: z.number().transform((v) => BigInt(v)),
        asset: z.string(),
        connectorID: z.string(),
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        description: z.string(),
        destinationAccountID: z.string(),
        error: z.string(),
        id: z.string(),
        initialAmount: z.number().transform((v) => BigInt(v)),
        metadata: z.nullable(z.record(z.string())).optional(),
        reference: z.string(),
        relatedAdjustments: z.array(transferinitiationadjusments_1.TransferInitiationAdjusments$.inboundSchema).optional(),
        relatedPayments: z.array(transferinitiationpayments_1.TransferInitiationPayments$.inboundSchema).optional(),
        scheduledAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        sourceAccountID: z.string(),
        status: transferinitiationstatus_1.TransferInitiationStatus$.inboundSchema,
        type: TransferInitiationType$.inboundSchema,
    });
    TransferInitiation$.outboundSchema = z.object({
        amount: z.bigint().transform((v) => Number(v)),
        asset: z.string(),
        connectorID: z.string(),
        createdAt: z.date().transform((v) => v.toISOString()),
        description: z.string(),
        destinationAccountID: z.string(),
        error: z.string(),
        id: z.string(),
        initialAmount: z.bigint().transform((v) => Number(v)),
        metadata: z.nullable(z.record(z.string())).optional(),
        reference: z.string(),
        relatedAdjustments: z.array(transferinitiationadjusments_1.TransferInitiationAdjusments$.outboundSchema).optional(),
        relatedPayments: z.array(transferinitiationpayments_1.TransferInitiationPayments$.outboundSchema).optional(),
        scheduledAt: z.date().transform((v) => v.toISOString()),
        sourceAccountID: z.string(),
        status: transferinitiationstatus_1.TransferInitiationStatus$.outboundSchema,
        type: TransferInitiationType$.outboundSchema,
    });
})(TransferInitiation$ || (exports.TransferInitiation$ = TransferInitiation$ = {}));
//# sourceMappingURL=transferinitiation.js.map
import { Posting, Posting$ } from "./posting";
import { WalletsVolume, WalletsVolume$ } from "./walletsvolume";
import * as z from "zod";
export type WalletsTransaction = {
    id: number;
    ledger?: string | undefined;
    /**
     * Metadata associated with the wallet.
     */
    metadata: {
        [k: string]: string;
    };
    postCommitVolumes?: {
        [k: string]: {
            [k: string]: WalletsVolume;
        };
    } | undefined;
    postings: Array<Posting>;
    preCommitVolumes?: {
        [k: string]: {
            [k: string]: WalletsVolume;
        };
    } | undefined;
    reference?: string | undefined;
    timestamp: Date;
};
/** @internal */
export declare namespace WalletsTransaction$ {
    const inboundSchema: z.ZodType<WalletsTransaction, z.ZodTypeDef, unknown>;
    type Outbound = {
        id: number;
        ledger?: string | undefined;
        metadata: {
            [k: string]: string;
        };
        postCommitVolumes?: {
            [k: string]: {
                [k: string]: WalletsVolume$.Outbound;
            };
        } | undefined;
        postings: Array<Posting$.Outbound>;
        preCommitVolumes?: {
            [k: string]: {
                [k: string]: WalletsVolume$.Outbound;
            };
        } | undefined;
        reference?: string | undefined;
        timestamp: string;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WalletsTransaction>;
}
//# sourceMappingURL=walletstransaction.d.ts.map
import { OrchestrationConnector } from "./orchestrationconnector";
import { OrchestrationPaymentAdjustment, OrchestrationPaymentAdjustment$ } from "./orchestrationpaymentadjustment";
import { OrchestrationPaymentMetadata, OrchestrationPaymentMetadata$ } from "./orchestrationpaymentmetadata";
import { OrchestrationPaymentStatus } from "./orchestrationpaymentstatus";
import * as z from "zod";
export type OrchestrationPaymentRaw = {};
export declare enum OrchestrationPaymentScheme {
    Visa = "visa",
    Mastercard = "mastercard",
    Amex = "amex",
    Diners = "diners",
    Discover = "discover",
    Jcb = "jcb",
    Unionpay = "unionpay",
    SepaDebit = "sepa debit",
    SepaCredit = "sepa credit",
    Sepa = "sepa",
    ApplePay = "apple pay",
    GooglePay = "google pay",
    A2a = "a2a",
    AchDebit = "ach debit",
    Ach = "ach",
    Rtp = "rtp",
    Unknown = "unknown",
    Other = "other"
}
export declare enum OrchestrationPaymentType {
    PayIn = "PAY-IN",
    Payout = "PAYOUT",
    Transfer = "TRANSFER",
    Other = "OTHER"
}
export type OrchestrationPayment = {
    adjustments: Array<OrchestrationPaymentAdjustment>;
    asset: string;
    connectorID: string;
    createdAt: Date;
    destinationAccountID: string;
    id: string;
    initialAmount: bigint;
    metadata: OrchestrationPaymentMetadata | null;
    provider?: OrchestrationConnector | undefined;
    raw: OrchestrationPaymentRaw | null;
    reference: string;
    scheme: OrchestrationPaymentScheme;
    sourceAccountID: string;
    status: OrchestrationPaymentStatus;
    type: OrchestrationPaymentType;
};
/** @internal */
export declare namespace OrchestrationPaymentRaw$ {
    const inboundSchema: z.ZodType<OrchestrationPaymentRaw, z.ZodTypeDef, unknown>;
    type Outbound = {};
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OrchestrationPaymentRaw>;
}
/** @internal */
export declare namespace OrchestrationPaymentScheme$ {
    const inboundSchema: z.ZodNativeEnum<typeof OrchestrationPaymentScheme>;
    const outboundSchema: z.ZodNativeEnum<typeof OrchestrationPaymentScheme>;
}
/** @internal */
export declare namespace OrchestrationPaymentType$ {
    const inboundSchema: z.ZodNativeEnum<typeof OrchestrationPaymentType>;
    const outboundSchema: z.ZodNativeEnum<typeof OrchestrationPaymentType>;
}
/** @internal */
export declare namespace OrchestrationPayment$ {
    const inboundSchema: z.ZodType<OrchestrationPayment, z.ZodTypeDef, unknown>;
    type Outbound = {
        adjustments: Array<OrchestrationPaymentAdjustment$.Outbound>;
        asset: string;
        connectorID: string;
        createdAt: string;
        destinationAccountID: string;
        id: string;
        initialAmount: number;
        metadata: OrchestrationPaymentMetadata$.Outbound | null;
        provider?: string | undefined;
        raw: OrchestrationPaymentRaw$.Outbound | null;
        reference: string;
        scheme: string;
        sourceAccountID: string;
        status: string;
        type: string;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OrchestrationPayment>;
}
//# sourceMappingURL=orchestrationpayment.d.ts.map
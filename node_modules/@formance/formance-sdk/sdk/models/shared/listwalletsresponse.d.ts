import { Wallet, Wallet$ } from "./wallet";
import * as z from "zod";
export type ListWalletsResponseCursor = {
    data: Array<Wallet>;
    hasMore?: boolean | undefined;
    next?: string | undefined;
    pageSize: number;
    previous?: string | undefined;
};
export type ListWalletsResponse = {
    cursor: ListWalletsResponseCursor;
};
/** @internal */
export declare namespace ListWalletsResponseCursor$ {
    const inboundSchema: z.ZodType<ListWalletsResponseCursor, z.ZodTypeDef, unknown>;
    type Outbound = {
        data: Array<Wallet$.Outbound>;
        hasMore?: boolean | undefined;
        next?: string | undefined;
        pageSize: number;
        previous?: string | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListWalletsResponseCursor>;
}
/** @internal */
export declare namespace ListWalletsResponse$ {
    const inboundSchema: z.ZodType<ListWalletsResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        cursor: ListWalletsResponseCursor$.Outbound;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListWalletsResponse>;
}
//# sourceMappingURL=listwalletsresponse.d.ts.map
import { Connector } from "./connector";
import { PaymentAdjustment, PaymentAdjustment$ } from "./paymentadjustment";
import { PaymentScheme } from "./paymentscheme";
import { PaymentStatus } from "./paymentstatus";
import { PaymentType } from "./paymenttype";
import * as z from "zod";
export type Raw = {};
export type Payment = {
    adjustments: Array<PaymentAdjustment>;
    amount: bigint;
    asset: string;
    connectorID: string;
    createdAt: Date;
    destinationAccountID: string;
    id: string;
    initialAmount: bigint;
    metadata: {
        [k: string]: string;
    } | null;
    provider?: Connector | undefined;
    raw: Raw | null;
    reference: string;
    scheme: PaymentScheme;
    sourceAccountID: string;
    status: PaymentStatus;
    type: PaymentType;
};
/** @internal */
export declare namespace Raw$ {
    const inboundSchema: z.ZodType<Raw, z.ZodTypeDef, unknown>;
    type Outbound = {};
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Raw>;
}
/** @internal */
export declare namespace Payment$ {
    const inboundSchema: z.ZodType<Payment, z.ZodTypeDef, unknown>;
    type Outbound = {
        adjustments: Array<PaymentAdjustment$.Outbound>;
        amount: number;
        asset: string;
        connectorID: string;
        createdAt: string;
        destinationAccountID: string;
        id: string;
        initialAmount: number;
        metadata: {
            [k: string]: string;
        } | null;
        provider?: string | undefined;
        raw: Raw$.Outbound | null;
        reference: string;
        scheme: string;
        sourceAccountID: string;
        status: string;
        type: string;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Payment>;
}
//# sourceMappingURL=payment.d.ts.map
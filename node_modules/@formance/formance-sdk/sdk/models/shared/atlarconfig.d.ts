import * as z from "zod";
export type AtlarConfig = {
    /**
     * The access key used by the connector for authorizing requests to the Atlar API.
     *
     * @remarks
     * You can obtain it along with the associated secret from the Atlar dashboard.
     *
     */
    accessKey: string;
    /**
     * The base URL the client uses for making requests towards the Atlar API.
     *
     * @remarks
     *
     */
    baseUrl?: string | undefined;
    name: string;
    /**
     * Number of items to fetch when querying paginated APIs.
     *
     * @remarks
     *
     */
    pageSize?: number | undefined;
    /**
     * The frequency at which the connector tries to fetch new Transaction objects from the Atlar API.
     *
     * @remarks
     *
     */
    pollingPeriod?: string | undefined;
    /**
     * The secret used by the connector for authorizing requests to the Atlar API.
     *
     * @remarks
     * You can obtain it along with the associated access key from the Atlar dashboard.
     *
     */
    secret: string;
    /**
     * The frequency at which the connector tries to fetch the status of payment initiations from the Atlar API.
     *
     * @remarks
     *
     */
    transferInitiationStatusPollingPeriod?: string | undefined;
};
/** @internal */
export declare namespace AtlarConfig$ {
    const inboundSchema: z.ZodType<AtlarConfig, z.ZodTypeDef, unknown>;
    type Outbound = {
        accessKey: string;
        baseUrl: string;
        name: string;
        pageSize: number;
        pollingPeriod: string;
        secret: string;
        transferInitiationStatusPollingPeriod: string;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AtlarConfig>;
}
//# sourceMappingURL=atlarconfig.d.ts.map
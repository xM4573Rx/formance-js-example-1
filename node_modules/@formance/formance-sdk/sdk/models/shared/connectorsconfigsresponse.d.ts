import * as z from "zod";
export type Key = {
    dataType: string;
    required: boolean;
};
export type ConnectorsConfigsResponseConnector = {
    key: Key;
};
export type ConnectorsConfigsResponseData = {
    connector: ConnectorsConfigsResponseConnector;
};
export type ConnectorsConfigsResponse = {
    data: ConnectorsConfigsResponseData;
};
/** @internal */
export declare namespace Key$ {
    const inboundSchema: z.ZodType<Key, z.ZodTypeDef, unknown>;
    type Outbound = {
        dataType: string;
        required: boolean;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Key>;
}
/** @internal */
export declare namespace ConnectorsConfigsResponseConnector$ {
    const inboundSchema: z.ZodType<ConnectorsConfigsResponseConnector, z.ZodTypeDef, unknown>;
    type Outbound = {
        key: Key$.Outbound;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsConfigsResponseConnector>;
}
/** @internal */
export declare namespace ConnectorsConfigsResponseData$ {
    const inboundSchema: z.ZodType<ConnectorsConfigsResponseData, z.ZodTypeDef, unknown>;
    type Outbound = {
        connector: ConnectorsConfigsResponseConnector$.Outbound;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsConfigsResponseData>;
}
/** @internal */
export declare namespace ConnectorsConfigsResponse$ {
    const inboundSchema: z.ZodType<ConnectorsConfigsResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        data: ConnectorsConfigsResponseData$.Outbound;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsConfigsResponse>;
}
//# sourceMappingURL=connectorsconfigsresponse.d.ts.map
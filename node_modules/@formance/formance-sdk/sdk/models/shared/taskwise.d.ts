import { PaymentStatus } from "./paymentstatus";
import * as z from "zod";
export type TaskWiseDescriptor = {
    key?: string | undefined;
    name?: string | undefined;
    profileID?: number | undefined;
};
export type TaskWiseState = {};
export type TaskWise = {
    connectorID: string;
    createdAt: Date;
    descriptor: TaskWiseDescriptor;
    error?: string | undefined;
    id: string;
    state: TaskWiseState;
    status: PaymentStatus;
    updatedAt: Date;
};
/** @internal */
export declare namespace TaskWiseDescriptor$ {
    const inboundSchema: z.ZodType<TaskWiseDescriptor, z.ZodTypeDef, unknown>;
    type Outbound = {
        key?: string | undefined;
        name?: string | undefined;
        profileID?: number | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskWiseDescriptor>;
}
/** @internal */
export declare namespace TaskWiseState$ {
    const inboundSchema: z.ZodType<TaskWiseState, z.ZodTypeDef, unknown>;
    type Outbound = {};
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskWiseState>;
}
/** @internal */
export declare namespace TaskWise$ {
    const inboundSchema: z.ZodType<TaskWise, z.ZodTypeDef, unknown>;
    type Outbound = {
        connectorID: string;
        createdAt: string;
        descriptor: TaskWiseDescriptor$.Outbound;
        error?: string | undefined;
        id: string;
        state: TaskWiseState$.Outbound;
        status: string;
        updatedAt: string;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskWise>;
}
//# sourceMappingURL=taskwise.d.ts.map
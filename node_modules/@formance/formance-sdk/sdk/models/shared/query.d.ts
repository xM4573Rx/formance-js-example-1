import * as z from "zod";
export type QueryRaw = {};
export type Query = {
    after?: Array<string> | undefined;
    cursor?: string | undefined;
    ledgers?: Array<string> | undefined;
    pageSize?: number | undefined;
    policy?: string | undefined;
    raw?: QueryRaw | undefined;
    sort?: string | undefined;
    target?: string | undefined;
    terms?: Array<string> | undefined;
};
/** @internal */
export declare namespace QueryRaw$ {
    const inboundSchema: z.ZodType<QueryRaw, z.ZodTypeDef, unknown>;
    type Outbound = {};
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, QueryRaw>;
}
/** @internal */
export declare namespace Query$ {
    const inboundSchema: z.ZodType<Query, z.ZodTypeDef, unknown>;
    type Outbound = {
        after?: Array<string> | undefined;
        cursor?: string | undefined;
        ledgers?: Array<string> | undefined;
        pageSize?: number | undefined;
        policy?: string | undefined;
        raw?: QueryRaw$.Outbound | undefined;
        sort?: string | undefined;
        target?: string | undefined;
        terms?: Array<string> | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Query>;
}
//# sourceMappingURL=query.d.ts.map
import { Log, Log$ } from "./log";
import * as z from "zod";
export type LogsCursorResponseCursor = {
    data: Array<Log>;
    hasMore: boolean;
    next?: string | undefined;
    pageSize: number;
    previous?: string | undefined;
};
export type LogsCursorResponse = {
    cursor: LogsCursorResponseCursor;
};
/** @internal */
export declare namespace LogsCursorResponseCursor$ {
    const inboundSchema: z.ZodType<LogsCursorResponseCursor, z.ZodTypeDef, unknown>;
    type Outbound = {
        data: Array<Log$.Outbound>;
        hasMore: boolean;
        next?: string | undefined;
        pageSize: number;
        previous?: string | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LogsCursorResponseCursor>;
}
/** @internal */
export declare namespace LogsCursorResponse$ {
    const inboundSchema: z.ZodType<LogsCursorResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        cursor: LogsCursorResponseCursor$.Outbound;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LogsCursorResponse>;
}
//# sourceMappingURL=logscursorresponse.d.ts.map
import { Posting, Posting$ } from "./posting";
import { Volume, Volume$ } from "./volume";
import * as z from "zod";
export type Transaction = {
    metadata?: {
        [k: string]: any;
    } | null | undefined;
    postCommitVolumes?: {
        [k: string]: {
            [k: string]: Volume;
        };
    } | undefined;
    postings: Array<Posting>;
    preCommitVolumes?: {
        [k: string]: {
            [k: string]: Volume;
        };
    } | undefined;
    reference?: string | undefined;
    timestamp: Date;
    txid: bigint;
};
/** @internal */
export declare namespace Transaction$ {
    const inboundSchema: z.ZodType<Transaction, z.ZodTypeDef, unknown>;
    type Outbound = {
        metadata?: {
            [k: string]: any;
        } | null | undefined;
        postCommitVolumes?: {
            [k: string]: {
                [k: string]: Volume$.Outbound;
            };
        } | undefined;
        postings: Array<Posting$.Outbound>;
        preCommitVolumes?: {
            [k: string]: {
                [k: string]: Volume$.Outbound;
            };
        } | undefined;
        reference?: string | undefined;
        timestamp: string;
        txid: number;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Transaction>;
}
//# sourceMappingURL=transaction.d.ts.map
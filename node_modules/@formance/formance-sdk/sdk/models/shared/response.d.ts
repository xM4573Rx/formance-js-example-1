import * as z from "zod";
export type Total = {
    relation?: string | undefined;
    value?: number | undefined;
};
export type ResponseCursor = {
    data?: Array<{
        [k: string]: any;
    }> | undefined;
    hasMore?: boolean | undefined;
    next?: string | undefined;
    pageSize?: number | undefined;
    previous?: string | undefined;
    total?: Total | undefined;
};
export type Response = {
    cursor?: ResponseCursor | undefined;
    /**
     * The payload
     */
    data?: {
        [k: string]: any;
    } | undefined;
};
/** @internal */
export declare namespace Total$ {
    const inboundSchema: z.ZodType<Total, z.ZodTypeDef, unknown>;
    type Outbound = {
        relation?: string | undefined;
        value?: number | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Total>;
}
/** @internal */
export declare namespace ResponseCursor$ {
    const inboundSchema: z.ZodType<ResponseCursor, z.ZodTypeDef, unknown>;
    type Outbound = {
        data?: Array<{
            [k: string]: any;
        }> | undefined;
        hasMore?: boolean | undefined;
        next?: string | undefined;
        pageSize?: number | undefined;
        previous?: string | undefined;
        total?: Total$.Outbound | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseCursor>;
}
/** @internal */
export declare namespace Response$ {
    const inboundSchema: z.ZodType<Response, z.ZodTypeDef, unknown>;
    type Outbound = {
        cursor?: ResponseCursor$.Outbound | undefined;
        data?: {
            [k: string]: any;
        } | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Response>;
}
//# sourceMappingURL=response.d.ts.map
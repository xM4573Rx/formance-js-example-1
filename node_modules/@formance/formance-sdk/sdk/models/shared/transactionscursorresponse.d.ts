import { Transaction, Transaction$ } from "./transaction";
import * as z from "zod";
export type TransactionsCursorResponseCursor = {
    data: Array<Transaction>;
    hasMore: boolean;
    next?: string | undefined;
    pageSize: number;
    previous?: string | undefined;
};
export type TransactionsCursorResponse = {
    cursor: TransactionsCursorResponseCursor;
};
/** @internal */
export declare namespace TransactionsCursorResponseCursor$ {
    const inboundSchema: z.ZodType<TransactionsCursorResponseCursor, z.ZodTypeDef, unknown>;
    type Outbound = {
        data: Array<Transaction$.Outbound>;
        hasMore: boolean;
        next?: string | undefined;
        pageSize: number;
        previous?: string | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionsCursorResponseCursor>;
}
/** @internal */
export declare namespace TransactionsCursorResponse$ {
    const inboundSchema: z.ZodType<TransactionsCursorResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        cursor: TransactionsCursorResponseCursor$.Outbound;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionsCursorResponse>;
}
//# sourceMappingURL=transactionscursorresponse.d.ts.map
import { Connector } from "./connector";
import * as z from "zod";
export declare enum TransferInitiationRequestType {
    Transfer = "TRANSFER",
    Payout = "PAYOUT"
}
export type TransferInitiationRequest = {
    amount: bigint;
    asset: string;
    connectorID?: string | undefined;
    description: string;
    destinationAccountID: string;
    metadata?: {
        [k: string]: string;
    } | null | undefined;
    provider?: Connector | undefined;
    reference: string;
    scheduledAt: Date;
    sourceAccountID: string;
    type: TransferInitiationRequestType;
    validated: boolean;
};
/** @internal */
export declare namespace TransferInitiationRequestType$ {
    const inboundSchema: z.ZodNativeEnum<typeof TransferInitiationRequestType>;
    const outboundSchema: z.ZodNativeEnum<typeof TransferInitiationRequestType>;
}
/** @internal */
export declare namespace TransferInitiationRequest$ {
    const inboundSchema: z.ZodType<TransferInitiationRequest, z.ZodTypeDef, unknown>;
    type Outbound = {
        amount: number;
        asset: string;
        connectorID?: string | undefined;
        description: string;
        destinationAccountID: string;
        metadata?: {
            [k: string]: string;
        } | null | undefined;
        provider?: string | undefined;
        reference: string;
        scheduledAt: string;
        sourceAccountID: string;
        type: string;
        validated: boolean;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransferInitiationRequest>;
}
//# sourceMappingURL=transferinitiationrequest.d.ts.map
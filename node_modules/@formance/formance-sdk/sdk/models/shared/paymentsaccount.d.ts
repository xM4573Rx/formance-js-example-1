import { AccountType } from "./accounttype";
import * as z from "zod";
export type PaymentsAccountRaw = {};
export type PaymentsAccount = {
    accountName: string;
    connectorID: string;
    createdAt: Date;
    defaultAsset: string;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    defaultCurrency: string;
    id: string;
    metadata: {
        [k: string]: string;
    } | null;
    pools?: Array<string> | undefined;
    provider?: string | undefined;
    raw: PaymentsAccountRaw | null;
    reference: string;
    type: AccountType;
};
/** @internal */
export declare namespace PaymentsAccountRaw$ {
    const inboundSchema: z.ZodType<PaymentsAccountRaw, z.ZodTypeDef, unknown>;
    type Outbound = {};
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentsAccountRaw>;
}
/** @internal */
export declare namespace PaymentsAccount$ {
    const inboundSchema: z.ZodType<PaymentsAccount, z.ZodTypeDef, unknown>;
    type Outbound = {
        accountName: string;
        connectorID: string;
        createdAt: string;
        defaultAsset: string;
        defaultCurrency: string;
        id: string;
        metadata: {
            [k: string]: string;
        } | null;
        pools?: Array<string> | undefined;
        provider?: string | undefined;
        raw: PaymentsAccountRaw$.Outbound | null;
        reference: string;
        type: string;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentsAccount>;
}
//# sourceMappingURL=paymentsaccount.d.ts.map
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowInstanceHistoryStageInput$ = void 0;
const primitives_1 = require("../../../lib/primitives");
const activityaddaccountmetadata_1 = require("./activityaddaccountmetadata");
const activityconfirmhold_1 = require("./activityconfirmhold");
const activitycreatetransaction_1 = require("./activitycreatetransaction");
const activitycreditwallet_1 = require("./activitycreditwallet");
const activitydebitwallet_1 = require("./activitydebitwallet");
const activitygetaccount_1 = require("./activitygetaccount");
const activitygetpayment_1 = require("./activitygetpayment");
const activitygetwallet_1 = require("./activitygetwallet");
const activitylistwallets_1 = require("./activitylistwallets");
const activityreverttransaction_1 = require("./activityreverttransaction");
const activitystripetransfer_1 = require("./activitystripetransfer");
const activityvoidhold_1 = require("./activityvoidhold");
const z = __importStar(require("zod"));
/** @internal */
var WorkflowInstanceHistoryStageInput$;
(function (WorkflowInstanceHistoryStageInput$) {
    WorkflowInstanceHistoryStageInput$.inboundSchema = z
        .object({
        AddAccountMetadata: activityaddaccountmetadata_1.ActivityAddAccountMetadata$.inboundSchema.optional(),
        ConfirmHold: activityconfirmhold_1.ActivityConfirmHold$.inboundSchema.optional(),
        CreateTransaction: activitycreatetransaction_1.ActivityCreateTransaction$.inboundSchema.optional(),
        CreditWallet: activitycreditwallet_1.ActivityCreditWallet$.inboundSchema.optional(),
        DebitWallet: activitydebitwallet_1.ActivityDebitWallet$.inboundSchema.optional(),
        GetAccount: activitygetaccount_1.ActivityGetAccount$.inboundSchema.optional(),
        GetPayment: activitygetpayment_1.ActivityGetPayment$.inboundSchema.optional(),
        GetWallet: activitygetwallet_1.ActivityGetWallet$.inboundSchema.optional(),
        ListWallets: activitylistwallets_1.ActivityListWallets$.inboundSchema.optional(),
        RevertTransaction: activityreverttransaction_1.ActivityRevertTransaction$.inboundSchema.optional(),
        StripeTransfer: activitystripetransfer_1.ActivityStripeTransfer$.inboundSchema.optional(),
        VoidHold: activityvoidhold_1.ActivityVoidHold$.inboundSchema.optional(),
    })
        .transform((v) => {
        return (0, primitives_1.remap)(v, {
            AddAccountMetadata: "addAccountMetadata",
            ConfirmHold: "confirmHold",
            CreateTransaction: "createTransaction",
            CreditWallet: "creditWallet",
            DebitWallet: "debitWallet",
            GetAccount: "getAccount",
            GetPayment: "getPayment",
            GetWallet: "getWallet",
            ListWallets: "listWallets",
            RevertTransaction: "revertTransaction",
            StripeTransfer: "stripeTransfer",
            VoidHold: "voidHold",
        });
    });
    WorkflowInstanceHistoryStageInput$.outboundSchema = z
        .object({
        addAccountMetadata: activityaddaccountmetadata_1.ActivityAddAccountMetadata$.outboundSchema.optional(),
        confirmHold: activityconfirmhold_1.ActivityConfirmHold$.outboundSchema.optional(),
        createTransaction: activitycreatetransaction_1.ActivityCreateTransaction$.outboundSchema.optional(),
        creditWallet: activitycreditwallet_1.ActivityCreditWallet$.outboundSchema.optional(),
        debitWallet: activitydebitwallet_1.ActivityDebitWallet$.outboundSchema.optional(),
        getAccount: activitygetaccount_1.ActivityGetAccount$.outboundSchema.optional(),
        getPayment: activitygetpayment_1.ActivityGetPayment$.outboundSchema.optional(),
        getWallet: activitygetwallet_1.ActivityGetWallet$.outboundSchema.optional(),
        listWallets: activitylistwallets_1.ActivityListWallets$.outboundSchema.optional(),
        revertTransaction: activityreverttransaction_1.ActivityRevertTransaction$.outboundSchema.optional(),
        stripeTransfer: activitystripetransfer_1.ActivityStripeTransfer$.outboundSchema.optional(),
        voidHold: activityvoidhold_1.ActivityVoidHold$.outboundSchema.optional(),
    })
        .transform((v) => {
        return (0, primitives_1.remap)(v, {
            addAccountMetadata: "AddAccountMetadata",
            confirmHold: "ConfirmHold",
            createTransaction: "CreateTransaction",
            creditWallet: "CreditWallet",
            debitWallet: "DebitWallet",
            getAccount: "GetAccount",
            getPayment: "GetPayment",
            getWallet: "GetWallet",
            listWallets: "ListWallets",
            revertTransaction: "RevertTransaction",
            stripeTransfer: "StripeTransfer",
            voidHold: "VoidHold",
        });
    });
})(WorkflowInstanceHistoryStageInput$ || (exports.WorkflowInstanceHistoryStageInput$ = WorkflowInstanceHistoryStageInput$ = {}));
//# sourceMappingURL=workflowinstancehistorystageinput.js.map
import * as z from "zod";
export type Filter = {
    error?: string | undefined;
    match?: boolean | undefined;
};
export type Variables = {
    error?: string | undefined;
    value?: string | undefined;
};
export type V2TriggerTest = {
    filter?: Filter | undefined;
    variables?: {
        [k: string]: Variables;
    } | undefined;
};
/** @internal */
export declare namespace Filter$ {
    const inboundSchema: z.ZodType<Filter, z.ZodTypeDef, unknown>;
    type Outbound = {
        error?: string | undefined;
        match?: boolean | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Filter>;
}
/** @internal */
export declare namespace Variables$ {
    const inboundSchema: z.ZodType<Variables, z.ZodTypeDef, unknown>;
    type Outbound = {
        error?: string | undefined;
        value?: string | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Variables>;
}
/** @internal */
export declare namespace V2TriggerTest$ {
    const inboundSchema: z.ZodType<V2TriggerTest, z.ZodTypeDef, unknown>;
    type Outbound = {
        filter?: Filter$.Outbound | undefined;
        variables?: {
            [k: string]: Variables$.Outbound;
        } | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2TriggerTest>;
}
//# sourceMappingURL=v2triggertest.d.ts.map
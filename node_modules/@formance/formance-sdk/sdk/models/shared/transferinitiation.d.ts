import { TransferInitiationAdjusments, TransferInitiationAdjusments$ } from "./transferinitiationadjusments";
import { TransferInitiationPayments, TransferInitiationPayments$ } from "./transferinitiationpayments";
import { TransferInitiationStatus } from "./transferinitiationstatus";
import * as z from "zod";
export declare enum TransferInitiationType {
    Transfer = "TRANSFER",
    Payout = "PAYOUT"
}
export type TransferInitiation = {
    amount: bigint;
    asset: string;
    connectorID: string;
    createdAt: Date;
    description: string;
    destinationAccountID: string;
    error: string;
    id: string;
    initialAmount: bigint;
    metadata?: {
        [k: string]: string;
    } | null | undefined;
    reference: string;
    relatedAdjustments?: Array<TransferInitiationAdjusments> | undefined;
    relatedPayments?: Array<TransferInitiationPayments> | undefined;
    scheduledAt: Date;
    sourceAccountID: string;
    status: TransferInitiationStatus;
    type: TransferInitiationType;
};
/** @internal */
export declare namespace TransferInitiationType$ {
    const inboundSchema: z.ZodNativeEnum<typeof TransferInitiationType>;
    const outboundSchema: z.ZodNativeEnum<typeof TransferInitiationType>;
}
/** @internal */
export declare namespace TransferInitiation$ {
    const inboundSchema: z.ZodType<TransferInitiation, z.ZodTypeDef, unknown>;
    type Outbound = {
        amount: number;
        asset: string;
        connectorID: string;
        createdAt: string;
        description: string;
        destinationAccountID: string;
        error: string;
        id: string;
        initialAmount: number;
        metadata?: {
            [k: string]: string;
        } | null | undefined;
        reference: string;
        relatedAdjustments?: Array<TransferInitiationAdjusments$.Outbound> | undefined;
        relatedPayments?: Array<TransferInitiationPayments$.Outbound> | undefined;
        scheduledAt: string;
        sourceAccountID: string;
        status: string;
        type: string;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransferInitiation>;
}
//# sourceMappingURL=transferinitiation.d.ts.map
import * as z from "zod";
export type BalancesCursorResponseCursor = {
    data: Array<{
        [k: string]: {
            [k: string]: number;
        };
    }>;
    hasMore: boolean;
    next?: string | undefined;
    pageSize: number;
    previous?: string | undefined;
};
export type BalancesCursorResponse = {
    cursor: BalancesCursorResponseCursor;
};
/** @internal */
export declare namespace BalancesCursorResponseCursor$ {
    const inboundSchema: z.ZodType<BalancesCursorResponseCursor, z.ZodTypeDef, unknown>;
    type Outbound = {
        data: Array<{
            [k: string]: {
                [k: string]: number;
            };
        }>;
        hasMore: boolean;
        next?: string | undefined;
        pageSize: number;
        previous?: string | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BalancesCursorResponseCursor>;
}
/** @internal */
export declare namespace BalancesCursorResponse$ {
    const inboundSchema: z.ZodType<BalancesCursorResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        cursor: BalancesCursorResponseCursor$.Outbound;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BalancesCursorResponse>;
}
//# sourceMappingURL=balancescursorresponse.d.ts.map
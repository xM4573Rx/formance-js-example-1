import { PaymentStatus } from "./paymentstatus";
import * as z from "zod";
export type Descriptor = {
    key?: string | undefined;
    name?: string | undefined;
};
export type TaskBankingCircleState = {};
export type TaskBankingCircle = {
    connectorID: string;
    createdAt: Date;
    descriptor: Descriptor;
    error?: string | undefined;
    id: string;
    state: TaskBankingCircleState;
    status: PaymentStatus;
    updatedAt: Date;
};
/** @internal */
export declare namespace Descriptor$ {
    const inboundSchema: z.ZodType<Descriptor, z.ZodTypeDef, unknown>;
    type Outbound = {
        key?: string | undefined;
        name?: string | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Descriptor>;
}
/** @internal */
export declare namespace TaskBankingCircleState$ {
    const inboundSchema: z.ZodType<TaskBankingCircleState, z.ZodTypeDef, unknown>;
    type Outbound = {};
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskBankingCircleState>;
}
/** @internal */
export declare namespace TaskBankingCircle$ {
    const inboundSchema: z.ZodType<TaskBankingCircle, z.ZodTypeDef, unknown>;
    type Outbound = {
        connectorID: string;
        createdAt: string;
        descriptor: Descriptor$.Outbound;
        error?: string | undefined;
        id: string;
        state: TaskBankingCircleState$.Outbound;
        status: string;
        updatedAt: string;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskBankingCircle>;
}
//# sourceMappingURL=taskbankingcircle.d.ts.map
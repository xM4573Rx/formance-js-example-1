"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.V2Log$ = exports.V2LogType$ = exports.V2LogType = void 0;
const z = __importStar(require("zod"));
var V2LogType;
(function (V2LogType) {
    V2LogType["NewTransaction"] = "NEW_TRANSACTION";
    V2LogType["SetMetadata"] = "SET_METADATA";
    V2LogType["RevertedTransaction"] = "REVERTED_TRANSACTION";
})(V2LogType || (exports.V2LogType = V2LogType = {}));
/** @internal */
var V2LogType$;
(function (V2LogType$) {
    V2LogType$.inboundSchema = z.nativeEnum(V2LogType);
    V2LogType$.outboundSchema = V2LogType$.inboundSchema;
})(V2LogType$ || (exports.V2LogType$ = V2LogType$ = {}));
/** @internal */
var V2Log$;
(function (V2Log$) {
    V2Log$.inboundSchema = z.object({
        data: z.record(z.any()),
        date: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        hash: z.string(),
        id: z.number().transform((v) => BigInt(v)),
        type: V2LogType$.inboundSchema,
    });
    V2Log$.outboundSchema = z.object({
        data: z.record(z.any()),
        date: z.date().transform((v) => v.toISOString()),
        hash: z.string(),
        id: z.bigint().transform((v) => Number(v)),
        type: V2LogType$.outboundSchema,
    });
})(V2Log$ || (exports.V2Log$ = V2Log$ = {}));
//# sourceMappingURL=v2log.js.map
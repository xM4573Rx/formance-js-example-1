import * as shared from "../shared";
import * as z from "zod";
export type CreateSecretRequest = {
    createSecretRequest?: shared.CreateSecretRequest | undefined;
    /**
     * Client ID
     */
    clientId: string;
};
export type CreateSecretResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Created secret
     */
    createSecretResponse?: shared.CreateSecretResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};
/** @internal */
export declare namespace CreateSecretRequest$ {
    const inboundSchema: z.ZodType<CreateSecretRequest, z.ZodTypeDef, unknown>;
    type Outbound = {
        CreateSecretRequest?: shared.CreateSecretRequest$.Outbound | undefined;
        clientId: string;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateSecretRequest>;
}
/** @internal */
export declare namespace CreateSecretResponse$ {
    const inboundSchema: z.ZodType<CreateSecretResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        ContentType: string;
        CreateSecretResponse?: shared.CreateSecretResponse$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateSecretResponse>;
}
//# sourceMappingURL=createsecret.d.ts.map
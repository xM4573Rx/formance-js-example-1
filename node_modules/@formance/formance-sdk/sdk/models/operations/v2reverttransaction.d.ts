import * as shared from "../shared";
import * as z from "zod";
export type V2RevertTransactionRequest = {
    /**
     * Revert transaction at effective date of the original tx
     */
    atEffectiveDate?: boolean | undefined;
    /**
     * Force revert
     */
    force?: boolean | undefined;
    /**
     * Transaction ID.
     */
    id: bigint;
    /**
     * Name of the ledger.
     */
    ledger: string;
};
export type V2RevertTransactionResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    v2RevertTransactionResponse?: shared.V2RevertTransactionResponse | undefined;
};
/** @internal */
export declare namespace V2RevertTransactionRequest$ {
    const inboundSchema: z.ZodType<V2RevertTransactionRequest, z.ZodTypeDef, unknown>;
    type Outbound = {
        atEffectiveDate?: boolean | undefined;
        force?: boolean | undefined;
        id: number;
        ledger: string;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2RevertTransactionRequest>;
}
/** @internal */
export declare namespace V2RevertTransactionResponse$ {
    const inboundSchema: z.ZodType<V2RevertTransactionResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        V2RevertTransactionResponse?: shared.V2RevertTransactionResponse$.Outbound | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2RevertTransactionResponse>;
}
//# sourceMappingURL=v2reverttransaction.d.ts.map
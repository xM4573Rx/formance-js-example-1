import * as shared from "../shared";
import * as z from "zod";
export type V2GetVolumesWithBalancesRequest = {
    /**
     * Parameter used in pagination requests. Maximum page size is set to 15.
     *
     * @remarks
     * Set to the value of next for the next page of results.
     * Set to the value of previous for the previous page of results.
     * No other parameters can be set when this parameter is set.
     *
     */
    cursor?: string | undefined;
    endTime?: Date | undefined;
    /**
     * Group volumes and balance by the level of the segment of the address
     */
    groupBy?: number | undefined;
    /**
     * Use insertion date instead of effective date
     */
    insertionDate?: boolean | undefined;
    /**
     * Name of the ledger.
     */
    ledger: string;
    /**
     * The maximum number of results to return per page.
     *
     * @remarks
     *
     */
    pageSize?: number | undefined;
    query?: {
        [k: string]: any;
    } | undefined;
    startTime?: Date | undefined;
};
export type V2GetVolumesWithBalancesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    v2VolumesWithBalanceCursorResponse?: shared.V2VolumesWithBalanceCursorResponse | undefined;
};
/** @internal */
export declare namespace V2GetVolumesWithBalancesRequest$ {
    const inboundSchema: z.ZodType<V2GetVolumesWithBalancesRequest, z.ZodTypeDef, unknown>;
    type Outbound = {
        cursor?: string | undefined;
        endTime?: string | undefined;
        groupBy?: number | undefined;
        insertionDate?: boolean | undefined;
        ledger: string;
        pageSize?: number | undefined;
        query?: {
            [k: string]: any;
        } | undefined;
        startTime?: string | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2GetVolumesWithBalancesRequest>;
}
/** @internal */
export declare namespace V2GetVolumesWithBalancesResponse$ {
    const inboundSchema: z.ZodType<V2GetVolumesWithBalancesResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        V2VolumesWithBalanceCursorResponse?: shared.V2VolumesWithBalanceCursorResponse$.Outbound | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2GetVolumesWithBalancesResponse>;
}
//# sourceMappingURL=v2getvolumeswithbalances.d.ts.map
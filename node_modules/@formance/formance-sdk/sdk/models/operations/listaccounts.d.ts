import * as shared from "../shared";
import * as z from "zod";
export type ListAccountsRequest = {
    /**
     * Filter accounts by address pattern (regular expression placed between ^ and $).
     */
    address?: string | undefined;
    /**
     * Pagination cursor, will return accounts after given address, in descending order.
     */
    after?: string | undefined;
    /**
     * Filter accounts by their balance (default operator is gte)
     */
    balance?: number | undefined;
    /**
     * Parameter used in pagination requests. Maximum page size is set to 1000.
     *
     * @remarks
     * Set to the value of next for the next page of results.
     * Set to the value of previous for the previous page of results.
     * No other parameters can be set when this parameter is set.
     *
     */
    cursor?: string | undefined;
    /**
     * Name of the ledger.
     */
    ledger: string;
    /**
     * Filter accounts by metadata key value pairs. Nested objects can be used as seen in the example below.
     */
    metadata?: {
        [k: string]: any;
    } | undefined;
    /**
     * The maximum number of results to return per page.
     *
     * @remarks
     *
     */
    pageSize?: number | undefined;
    /**
     * Parameter used in pagination requests. Maximum page size is set to 1000.
     *
     * @remarks
     * Set to the value of next for the next page of results.
     * Set to the value of previous for the previous page of results.
     * No other parameters can be set when this parameter is set.
     * Deprecated, please use `cursor` instead.
     *
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    paginationToken?: string | undefined;
};
export type ListAccountsResponse = {
    /**
     * OK
     */
    accountsCursorResponse?: shared.AccountsCursorResponse | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};
/** @internal */
export declare namespace ListAccountsRequest$ {
    const inboundSchema: z.ZodType<ListAccountsRequest, z.ZodTypeDef, unknown>;
    type Outbound = {
        address?: string | undefined;
        after?: string | undefined;
        balance?: number | undefined;
        cursor?: string | undefined;
        ledger: string;
        metadata?: {
            [k: string]: any;
        } | undefined;
        pageSize: number;
        pagination_token?: string | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListAccountsRequest>;
}
/** @internal */
export declare namespace ListAccountsResponse$ {
    const inboundSchema: z.ZodType<ListAccountsResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        AccountsCursorResponse?: shared.AccountsCursorResponse$.Outbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListAccountsResponse>;
}
//# sourceMappingURL=listaccounts.d.ts.map
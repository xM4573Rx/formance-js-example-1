import * as shared from "../shared";
import * as z from "zod";
export type V2ReadTriggerRequest = {
    /**
     * The trigger id
     */
    triggerID: string;
};
export type V2ReadTriggerResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * A specific trigger
     */
    v2ReadTriggerResponse?: shared.V2ReadTriggerResponse | undefined;
};
/** @internal */
export declare namespace V2ReadTriggerRequest$ {
    const inboundSchema: z.ZodType<V2ReadTriggerRequest, z.ZodTypeDef, unknown>;
    type Outbound = {
        triggerID: string;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2ReadTriggerRequest>;
}
/** @internal */
export declare namespace V2ReadTriggerResponse$ {
    const inboundSchema: z.ZodType<V2ReadTriggerResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        V2ReadTriggerResponse?: shared.V2ReadTriggerResponse$.Outbound | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2ReadTriggerResponse>;
}
//# sourceMappingURL=v2readtrigger.d.ts.map
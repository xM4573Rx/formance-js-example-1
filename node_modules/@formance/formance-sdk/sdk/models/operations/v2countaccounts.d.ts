import * as z from "zod";
export type V2CountAccountsRequest = {
    /**
     * Name of the ledger.
     */
    ledger: string;
    pit?: Date | undefined;
    query?: {
        [k: string]: any;
    } | undefined;
};
export type V2CountAccountsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    headers: {
        [k: string]: Array<string>;
    };
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};
/** @internal */
export declare namespace V2CountAccountsRequest$ {
    const inboundSchema: z.ZodType<V2CountAccountsRequest, z.ZodTypeDef, unknown>;
    type Outbound = {
        ledger: string;
        pit?: string | undefined;
        query?: {
            [k: string]: any;
        } | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2CountAccountsRequest>;
}
/** @internal */
export declare namespace V2CountAccountsResponse$ {
    const inboundSchema: z.ZodType<V2CountAccountsResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        ContentType: string;
        Headers: {
            [k: string]: Array<string>;
        };
        StatusCode: number;
        RawResponse: never;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2CountAccountsResponse>;
}
//# sourceMappingURL=v2countaccounts.d.ts.map
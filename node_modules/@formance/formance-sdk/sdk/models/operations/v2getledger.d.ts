import * as shared from "../shared";
import * as z from "zod";
export type V2GetLedgerRequest = {
    /**
     * Name of the ledger.
     */
    ledger: string;
};
export type V2GetLedgerResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    v2GetLedgerResponse?: shared.V2GetLedgerResponse | undefined;
};
/** @internal */
export declare namespace V2GetLedgerRequest$ {
    const inboundSchema: z.ZodType<V2GetLedgerRequest, z.ZodTypeDef, unknown>;
    type Outbound = {
        ledger: string;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2GetLedgerRequest>;
}
/** @internal */
export declare namespace V2GetLedgerResponse$ {
    const inboundSchema: z.ZodType<V2GetLedgerResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        V2GetLedgerResponse?: shared.V2GetLedgerResponse$.Outbound | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2GetLedgerResponse>;
}
//# sourceMappingURL=v2getledger.d.ts.map
import * as z from "zod";
/**
 * Filter transactions by metadata key value pairs. Nested objects can be used as seen in the example below.
 */
export type Metadata = {};
export type CountTransactionsRequest = {
    /**
     * Filter transactions with postings involving given account, either as source or destination (regular expression placed between ^ and $).
     */
    account?: string | undefined;
    /**
     * Filter transactions with postings involving given account at destination (regular expression placed between ^ and $).
     */
    destination?: string | undefined;
    /**
     * Filter transactions that occurred before this timestamp.
     *
     * @remarks
     * The format is RFC3339 and is exclusive (for example, "2023-01-02T15:04:01Z" excludes the first second of 4th minute).
     *
     */
    endTime?: Date | undefined;
    /**
     * Name of the ledger.
     */
    ledger: string;
    /**
     * Filter transactions by metadata key value pairs. Nested objects can be used as seen in the example below.
     */
    metadata?: Metadata | undefined;
    /**
     * Filter transactions by reference field.
     */
    reference?: string | undefined;
    /**
     * Filter transactions with postings involving given account at source (regular expression placed between ^ and $).
     */
    source?: string | undefined;
    /**
     * Filter transactions that occurred after this timestamp.
     *
     * @remarks
     * The format is RFC3339 and is inclusive (for example, "2023-01-02T15:04:01Z" includes the first second of 4th minute).
     *
     */
    startTime?: Date | undefined;
};
export type CountTransactionsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    headers: {
        [k: string]: Array<string>;
    };
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};
/** @internal */
export declare namespace Metadata$ {
    const inboundSchema: z.ZodType<Metadata, z.ZodTypeDef, unknown>;
    type Outbound = {};
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Metadata>;
}
/** @internal */
export declare namespace CountTransactionsRequest$ {
    const inboundSchema: z.ZodType<CountTransactionsRequest, z.ZodTypeDef, unknown>;
    type Outbound = {
        account?: string | undefined;
        destination?: string | undefined;
        endTime?: string | undefined;
        ledger: string;
        metadata?: Metadata$.Outbound | undefined;
        reference?: string | undefined;
        source?: string | undefined;
        startTime?: string | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CountTransactionsRequest>;
}
/** @internal */
export declare namespace CountTransactionsResponse$ {
    const inboundSchema: z.ZodType<CountTransactionsResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        ContentType: string;
        Headers: {
            [k: string]: Array<string>;
        };
        StatusCode: number;
        RawResponse: never;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CountTransactionsResponse>;
}
//# sourceMappingURL=counttransactions.d.ts.map
import * as shared from "../shared";
import * as z from "zod";
export type CreateTransactionsRequest = {
    transactions: shared.Transactions;
    /**
     * Name of the ledger.
     */
    ledger: string;
};
export type CreateTransactionsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    transactionsResponse?: shared.TransactionsResponse | undefined;
};
/** @internal */
export declare namespace CreateTransactionsRequest$ {
    const inboundSchema: z.ZodType<CreateTransactionsRequest, z.ZodTypeDef, unknown>;
    type Outbound = {
        Transactions: shared.Transactions$.Outbound;
        ledger: string;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateTransactionsRequest>;
}
/** @internal */
export declare namespace CreateTransactionsResponse$ {
    const inboundSchema: z.ZodType<CreateTransactionsResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        TransactionsResponse?: shared.TransactionsResponse$.Outbound | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateTransactionsResponse>;
}
//# sourceMappingURL=createtransactions.d.ts.map
import * as shared from "../shared";
import * as z from "zod";
export type ReadConnectorConfigRequest = {
    /**
     * The name of the connector.
     */
    connector: shared.Connector;
};
export type ReadConnectorConfigResponse = {
    /**
     * OK
     */
    connectorConfigResponse?: shared.ConnectorConfigResponse | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};
/** @internal */
export declare namespace ReadConnectorConfigRequest$ {
    const inboundSchema: z.ZodType<ReadConnectorConfigRequest, z.ZodTypeDef, unknown>;
    type Outbound = {
        connector: string;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReadConnectorConfigRequest>;
}
/** @internal */
export declare namespace ReadConnectorConfigResponse$ {
    const inboundSchema: z.ZodType<ReadConnectorConfigResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        ConnectorConfigResponse?: shared.ConnectorConfigResponse$.Outbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReadConnectorConfigResponse>;
}
//# sourceMappingURL=readconnectorconfig.d.ts.map
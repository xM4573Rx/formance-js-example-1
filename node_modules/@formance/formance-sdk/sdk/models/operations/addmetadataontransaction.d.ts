import * as z from "zod";
export type AddMetadataOnTransactionRequest = {
    /**
     * metadata
     */
    requestBody?: {
        [k: string]: any;
    } | null | undefined;
    /**
     * Name of the ledger.
     */
    ledger: string;
    /**
     * Transaction ID.
     */
    txid: bigint;
};
export type AddMetadataOnTransactionResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};
/** @internal */
export declare namespace AddMetadataOnTransactionRequest$ {
    const inboundSchema: z.ZodType<AddMetadataOnTransactionRequest, z.ZodTypeDef, unknown>;
    type Outbound = {
        RequestBody?: {
            [k: string]: any;
        } | null | undefined;
        ledger: string;
        txid: number;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddMetadataOnTransactionRequest>;
}
/** @internal */
export declare namespace AddMetadataOnTransactionResponse$ {
    const inboundSchema: z.ZodType<AddMetadataOnTransactionResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddMetadataOnTransactionResponse>;
}
//# sourceMappingURL=addmetadataontransaction.d.ts.map
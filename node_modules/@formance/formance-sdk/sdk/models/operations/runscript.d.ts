import * as shared from "../shared";
import * as z from "zod";
export type RunScriptRequest = {
    script: shared.Script;
    /**
     * Name of the ledger.
     */
    ledger: string;
    /**
     * Set the preview mode. Preview mode doesn't add the logs to the database or publish a message to the message broker.
     */
    preview?: boolean | undefined;
};
export type RunScriptResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * On success, it will return a 200 status code, and the resulting transaction under the `transaction` field.
     *
     * @remarks
     *
     * On failure, it will also return a 200 status code, and the following fields:
     *   - `details`: contains a URL. When there is an error parsing Numscript, the result can be difficult to readâ€”the provided URL will render the error in an easy-to-read format.
     *   - `errorCode` and `error_code` (deprecated): contains the string code of the error
     *   - `errorMessage` and `error_message` (deprecated): contains a human-readable indication of what went wrong, for example that an account had insufficient funds, or that there was an error in the provided Numscript.
     *
     */
    scriptResponse?: shared.ScriptResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};
/** @internal */
export declare namespace RunScriptRequest$ {
    const inboundSchema: z.ZodType<RunScriptRequest, z.ZodTypeDef, unknown>;
    type Outbound = {
        Script: shared.Script$.Outbound;
        ledger: string;
        preview?: boolean | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunScriptRequest>;
}
/** @internal */
export declare namespace RunScriptResponse$ {
    const inboundSchema: z.ZodType<RunScriptResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        ContentType: string;
        ScriptResponse?: shared.ScriptResponse$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunScriptResponse>;
}
//# sourceMappingURL=runscript.d.ts.map
import * as z from "zod";
export type V2AddMetadataOnTransactionRequest = {
    /**
     * Use an idempotency key
     */
    idempotencyKey?: string | undefined;
    /**
     * metadata
     */
    requestBody?: {
        [k: string]: string;
    } | undefined;
    /**
     * Set the dryRun mode. Dry run mode doesn't add the logs to the database or publish a message to the message broker.
     */
    dryRun?: boolean | undefined;
    /**
     * Transaction ID.
     */
    id: bigint;
    /**
     * Name of the ledger.
     */
    ledger: string;
};
export type V2AddMetadataOnTransactionResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};
/** @internal */
export declare namespace V2AddMetadataOnTransactionRequest$ {
    const inboundSchema: z.ZodType<V2AddMetadataOnTransactionRequest, z.ZodTypeDef, unknown>;
    type Outbound = {
        "Idempotency-Key"?: string | undefined;
        RequestBody?: {
            [k: string]: string;
        } | undefined;
        dryRun?: boolean | undefined;
        id: number;
        ledger: string;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2AddMetadataOnTransactionRequest>;
}
/** @internal */
export declare namespace V2AddMetadataOnTransactionResponse$ {
    const inboundSchema: z.ZodType<V2AddMetadataOnTransactionResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2AddMetadataOnTransactionResponse>;
}
//# sourceMappingURL=v2addmetadataontransaction.d.ts.map
import * as shared from "../shared";
import * as z from "zod";
export type V2GetBalancesAggregatedRequest = {
    /**
     * Name of the ledger.
     */
    ledger: string;
    pit?: Date | undefined;
    query?: {
        [k: string]: any;
    } | undefined;
    /**
     * Use insertion date instead of effective date
     */
    useInsertionDate?: boolean | undefined;
};
export type V2GetBalancesAggregatedResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    v2AggregateBalancesResponse?: shared.V2AggregateBalancesResponse | undefined;
};
/** @internal */
export declare namespace V2GetBalancesAggregatedRequest$ {
    const inboundSchema: z.ZodType<V2GetBalancesAggregatedRequest, z.ZodTypeDef, unknown>;
    type Outbound = {
        ledger: string;
        pit?: string | undefined;
        query?: {
            [k: string]: any;
        } | undefined;
        useInsertionDate?: boolean | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2GetBalancesAggregatedRequest>;
}
/** @internal */
export declare namespace V2GetBalancesAggregatedResponse$ {
    const inboundSchema: z.ZodType<V2GetBalancesAggregatedResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        V2AggregateBalancesResponse?: shared.V2AggregateBalancesResponse$.Outbound | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2GetBalancesAggregatedResponse>;
}
//# sourceMappingURL=v2getbalancesaggregated.d.ts.map
import * as z from "zod";
export type CountAccountsRequest = {
    /**
     * Filter accounts by address pattern (regular expression placed between ^ and $).
     */
    address?: string | undefined;
    /**
     * Name of the ledger.
     */
    ledger: string;
    /**
     * Filter accounts by metadata key value pairs. The filter can be used like this metadata[key]=value1&metadata[a.nested.key]=value2
     */
    metadata?: {
        [k: string]: any;
    } | undefined;
};
export type CountAccountsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    headers: {
        [k: string]: Array<string>;
    };
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};
/** @internal */
export declare namespace CountAccountsRequest$ {
    const inboundSchema: z.ZodType<CountAccountsRequest, z.ZodTypeDef, unknown>;
    type Outbound = {
        address?: string | undefined;
        ledger: string;
        metadata?: {
            [k: string]: any;
        } | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CountAccountsRequest>;
}
/** @internal */
export declare namespace CountAccountsResponse$ {
    const inboundSchema: z.ZodType<CountAccountsResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        ContentType: string;
        Headers: {
            [k: string]: Array<string>;
        };
        StatusCode: number;
        RawResponse: never;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CountAccountsResponse>;
}
//# sourceMappingURL=countaccounts.d.ts.map
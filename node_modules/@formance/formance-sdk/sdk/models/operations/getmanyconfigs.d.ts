import * as shared from "../shared";
import * as z from "zod";
export type GetManyConfigsRequest = {
    /**
     * Optional filter by endpoint URL
     */
    endpoint?: string | undefined;
    /**
     * Optional filter by Config ID
     */
    id?: string | undefined;
};
export type GetManyConfigsResponse = {
    /**
     * OK
     */
    configsResponse?: shared.ConfigsResponse | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};
/** @internal */
export declare namespace GetManyConfigsRequest$ {
    const inboundSchema: z.ZodType<GetManyConfigsRequest, z.ZodTypeDef, unknown>;
    type Outbound = {
        endpoint?: string | undefined;
        id?: string | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetManyConfigsRequest>;
}
/** @internal */
export declare namespace GetManyConfigsResponse$ {
    const inboundSchema: z.ZodType<GetManyConfigsResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        ConfigsResponse?: shared.ConfigsResponse$.Outbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetManyConfigsResponse>;
}
//# sourceMappingURL=getmanyconfigs.d.ts.map
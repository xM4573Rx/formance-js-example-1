import * as shared from "../shared";
import * as z from "zod";
export type ListTransactionsRequest = {
    /**
     * Filter transactions with postings involving given account, either as source or destination (regular expression placed between ^ and $).
     */
    account?: string | undefined;
    /**
     * Pagination cursor, will return transactions after given txid (in descending order).
     */
    after?: string | undefined;
    /**
     * Parameter used in pagination requests. Maximum page size is set to 1000.
     *
     * @remarks
     * Set to the value of next for the next page of results.
     * Set to the value of previous for the previous page of results.
     * No other parameters can be set when this parameter is set.
     *
     */
    cursor?: string | undefined;
    /**
     * Filter transactions with postings involving given account at destination (regular expression placed between ^ and $).
     */
    destination?: string | undefined;
    /**
     * Filter transactions that occurred before this timestamp.
     *
     * @remarks
     * The format is RFC3339 and is exclusive (for example, "2023-01-02T15:04:01Z" excludes the first second of 4th minute).
     *
     */
    endTime?: Date | undefined;
    /**
     * Name of the ledger.
     */
    ledger: string;
    /**
     * Filter transactions by metadata key value pairs. Nested objects can be used as seen in the example below.
     */
    metadata?: {
        [k: string]: any;
    } | undefined;
    /**
     * The maximum number of results to return per page.
     *
     * @remarks
     *
     */
    pageSize?: number | undefined;
    /**
     * Find transactions by reference field.
     */
    reference?: string | undefined;
    /**
     * Filter transactions with postings involving given account at source (regular expression placed between ^ and $).
     */
    source?: string | undefined;
    /**
     * Filter transactions that occurred after this timestamp.
     *
     * @remarks
     * The format is RFC3339 and is inclusive (for example, "2023-01-02T15:04:01Z" includes the first second of 4th minute).
     *
     */
    startTime?: Date | undefined;
};
export type ListTransactionsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    transactionsCursorResponse?: shared.TransactionsCursorResponse | undefined;
};
/** @internal */
export declare namespace ListTransactionsRequest$ {
    const inboundSchema: z.ZodType<ListTransactionsRequest, z.ZodTypeDef, unknown>;
    type Outbound = {
        account?: string | undefined;
        after?: string | undefined;
        cursor?: string | undefined;
        destination?: string | undefined;
        endTime?: string | undefined;
        ledger: string;
        metadata?: {
            [k: string]: any;
        } | undefined;
        pageSize: number;
        reference?: string | undefined;
        source?: string | undefined;
        startTime?: string | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListTransactionsRequest>;
}
/** @internal */
export declare namespace ListTransactionsResponse$ {
    const inboundSchema: z.ZodType<ListTransactionsResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        TransactionsCursorResponse?: shared.TransactionsCursorResponse$.Outbound | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListTransactionsResponse>;
}
//# sourceMappingURL=listtransactions.d.ts.map
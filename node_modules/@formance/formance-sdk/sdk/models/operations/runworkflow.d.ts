import * as shared from "../shared";
import * as z from "zod";
export type RunWorkflowRequest = {
    requestBody?: {
        [k: string]: string;
    } | undefined;
    /**
     * Wait end of the workflow before return
     */
    wait?: boolean | undefined;
    /**
     * The flow id
     */
    workflowID: string;
};
export type RunWorkflowResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * The workflow instance
     */
    runWorkflowResponse?: shared.RunWorkflowResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};
/** @internal */
export declare namespace RunWorkflowRequest$ {
    const inboundSchema: z.ZodType<RunWorkflowRequest, z.ZodTypeDef, unknown>;
    type Outbound = {
        RequestBody?: {
            [k: string]: string;
        } | undefined;
        wait?: boolean | undefined;
        workflowID: string;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunWorkflowRequest>;
}
/** @internal */
export declare namespace RunWorkflowResponse$ {
    const inboundSchema: z.ZodType<RunWorkflowResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        ContentType: string;
        RunWorkflowResponse?: shared.RunWorkflowResponse$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunWorkflowResponse>;
}
//# sourceMappingURL=runworkflow.d.ts.map
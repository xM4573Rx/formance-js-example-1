import * as shared from "../shared";
import * as z from "zod";
export type TestTriggerRequest = {
    requestBody?: {
        [k: string]: any;
    } | undefined;
    /**
     * The trigger id
     */
    triggerID: string;
};
export type TestTriggerResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Test a trigger
     */
    v2TestTriggerResponse?: shared.V2TestTriggerResponse | undefined;
};
/** @internal */
export declare namespace TestTriggerRequest$ {
    const inboundSchema: z.ZodType<TestTriggerRequest, z.ZodTypeDef, unknown>;
    type Outbound = {
        RequestBody?: {
            [k: string]: any;
        } | undefined;
        triggerID: string;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TestTriggerRequest>;
}
/** @internal */
export declare namespace TestTriggerResponse$ {
    const inboundSchema: z.ZodType<TestTriggerResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        V2TestTriggerResponse?: shared.V2TestTriggerResponse$.Outbound | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TestTriggerResponse>;
}
//# sourceMappingURL=testtrigger.d.ts.map
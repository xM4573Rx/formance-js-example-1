import * as shared from "../shared";
import * as z from "zod";
export type ConnectorsTransferRequest = {
    transferRequest: shared.TransferRequest;
    /**
     * The name of the connector.
     */
    connector: shared.Connector;
};
export type ConnectorsTransferResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    transferResponse?: shared.TransferResponse | undefined;
};
/** @internal */
export declare namespace ConnectorsTransferRequest$ {
    const inboundSchema: z.ZodType<ConnectorsTransferRequest, z.ZodTypeDef, unknown>;
    type Outbound = {
        TransferRequest: shared.TransferRequest$.Outbound;
        connector: string;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsTransferRequest>;
}
/** @internal */
export declare namespace ConnectorsTransferResponse$ {
    const inboundSchema: z.ZodType<ConnectorsTransferResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        TransferResponse?: shared.TransferResponse$.Outbound | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConnectorsTransferResponse>;
}
//# sourceMappingURL=connectorstransfer.d.ts.map
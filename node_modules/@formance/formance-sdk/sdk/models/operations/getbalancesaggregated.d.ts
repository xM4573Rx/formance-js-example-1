import * as shared from "../shared";
import * as z from "zod";
export type GetBalancesAggregatedRequest = {
    /**
     * Filter balances involving given account, either as source or destination.
     */
    address?: string | undefined;
    /**
     * Name of the ledger.
     */
    ledger: string;
    /**
     * Use insertion date instead of effective date
     */
    useInsertionDate?: boolean | undefined;
};
export type GetBalancesAggregatedResponse = {
    /**
     * OK
     */
    aggregateBalancesResponse?: shared.AggregateBalancesResponse | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};
/** @internal */
export declare namespace GetBalancesAggregatedRequest$ {
    const inboundSchema: z.ZodType<GetBalancesAggregatedRequest, z.ZodTypeDef, unknown>;
    type Outbound = {
        address?: string | undefined;
        ledger: string;
        useInsertionDate?: boolean | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetBalancesAggregatedRequest>;
}
/** @internal */
export declare namespace GetBalancesAggregatedResponse$ {
    const inboundSchema: z.ZodType<GetBalancesAggregatedResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        AggregateBalancesResponse?: shared.AggregateBalancesResponse$.Outbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetBalancesAggregatedResponse>;
}
//# sourceMappingURL=getbalancesaggregated.d.ts.map
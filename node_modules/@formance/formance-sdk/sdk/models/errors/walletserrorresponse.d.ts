import * as z from "zod";
export declare enum SchemasWalletsErrorResponseErrorCode {
    Validation = "VALIDATION",
    InternalError = "INTERNAL_ERROR",
    InsufficientFund = "INSUFFICIENT_FUND",
    HoldClosed = "HOLD_CLOSED"
}
/**
 * Error
 */
export type WalletsErrorResponseData = {
    errorCode: SchemasWalletsErrorResponseErrorCode;
    errorMessage: string;
};
/**
 * Error
 */
export declare class WalletsErrorResponse extends Error {
    errorCode: SchemasWalletsErrorResponseErrorCode;
    errorMessage: string;
    /** The original data that was passed to this error instance. */
    data$: WalletsErrorResponseData;
    constructor(err: WalletsErrorResponseData);
}
/** @internal */
export declare namespace SchemasWalletsErrorResponseErrorCode$ {
    const inboundSchema: z.ZodNativeEnum<typeof SchemasWalletsErrorResponseErrorCode>;
    const outboundSchema: z.ZodNativeEnum<typeof SchemasWalletsErrorResponseErrorCode>;
}
/** @internal */
export declare namespace WalletsErrorResponse$ {
    const inboundSchema: z.ZodType<WalletsErrorResponse, z.ZodTypeDef, unknown>;
    type Outbound = {
        errorCode: string;
        errorMessage: string;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WalletsErrorResponse>;
}
//# sourceMappingURL=walletserrorresponse.d.ts.map
import * as z from "zod";
export declare enum SchemasErrorCode {
    Validation = "VALIDATION",
    NotFound = "NOT_FOUND",
    Internal = "INTERNAL"
}
/**
 * General error
 */
export type V2ErrorData = {
    errorCode: SchemasErrorCode;
    errorMessage: string;
};
/**
 * General error
 */
export declare class V2Error extends Error {
    errorCode: SchemasErrorCode;
    errorMessage: string;
    /** The original data that was passed to this error instance. */
    data$: V2ErrorData;
    constructor(err: V2ErrorData);
}
/** @internal */
export declare namespace SchemasErrorCode$ {
    const inboundSchema: z.ZodNativeEnum<typeof SchemasErrorCode>;
    const outboundSchema: z.ZodNativeEnum<typeof SchemasErrorCode>;
}
/** @internal */
export declare namespace V2Error$ {
    const inboundSchema: z.ZodType<V2Error, z.ZodTypeDef, unknown>;
    type Outbound = {
        errorCode: string;
        errorMessage: string;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2Error>;
}
//# sourceMappingURL=v2error.d.ts.map
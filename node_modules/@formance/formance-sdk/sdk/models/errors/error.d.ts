import * as z from "zod";
export declare enum ErrorCode {
    Validation = "VALIDATION",
    NotFound = "NOT_FOUND",
    Internal = "INTERNAL"
}
/**
 * General error
 */
export type ErrorTData = {
    errorCode: ErrorCode;
    errorMessage: string;
};
/**
 * General error
 */
export declare class ErrorT extends Error {
    errorCode: ErrorCode;
    errorMessage: string;
    /** The original data that was passed to this error instance. */
    data$: ErrorTData;
    constructor(err: ErrorTData);
}
/** @internal */
export declare namespace ErrorCode$ {
    const inboundSchema: z.ZodNativeEnum<typeof ErrorCode>;
    const outboundSchema: z.ZodNativeEnum<typeof ErrorCode>;
}
/** @internal */
export declare namespace ErrorT$ {
    const inboundSchema: z.ZodType<ErrorT, z.ZodTypeDef, unknown>;
    type Outbound = {
        errorCode: string;
        errorMessage: string;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ErrorT>;
}
//# sourceMappingURL=error.d.ts.map
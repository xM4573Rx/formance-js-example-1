"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Wallets = void 0;
const hooks_1 = require("../hooks");
const config_1 = require("../lib/config");
const encodings_1 = require("../lib/encodings");
const http_1 = require("../lib/http");
const schemas$ = __importStar(require("../lib/schemas"));
const sdks_1 = require("../lib/sdks");
const errors = __importStar(require("./models/errors"));
const operations = __importStar(require("./models/operations"));
const shared = __importStar(require("./models/shared"));
class Wallets extends sdks_1.ClientSDK {
    constructor(options = {}) {
        const opt = options;
        let hooks;
        if (typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof hooks_1.SDKHooks) {
            hooks = opt.hooks;
        }
        else {
            hooks = new hooks_1.SDKHooks();
        }
        super({
            client: options.httpClient || new http_1.HTTPClient(),
            baseURL: (0, config_1.serverURLFromOptions)(options),
            hooks,
        });
        this.options$ = { ...options, hooks };
        void this.options$;
    }
    /**
     * Confirm a hold
     */
    async confirmHold(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.ConfirmHoldRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_1.encodeJSON)("body", payload$.ConfirmHoldRequest, { explode: true });
        const pathParams$ = {
            hold_id: (0, encodings_1.encodeSimple)("hold_id", payload$.hold_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/wallets/holds/{hold_id}/confirm")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "confirmHold",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void(204, operations.ConfirmHoldResponse$)
            .json("default", errors.WalletsErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Create a balance
     */
    async createBalance(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.CreateBalanceRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_1.encodeJSON)("body", payload$.CreateBalanceRequest, { explode: true });
        const pathParams$ = {
            id: (0, encodings_1.encodeSimple)("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/api/wallets/wallets/{id}/balances")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "createBalance",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(201, operations.CreateBalanceResponse$, { key: "CreateBalanceResponse" })
            .json("default", errors.WalletsErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Create a new wallet
     */
    async createWallet(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => shared.CreateWalletRequest$.outboundSchema.optional().parse(value$), "Input validation failed");
        const body$ = payload$ === undefined ? null : (0, encodings_1.encodeJSON)("body", payload$, { explode: true });
        const path$ = this.templateURLComponent("/api/wallets/wallets")();
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "createWallet",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(201, operations.CreateWalletResponse$, { key: "CreateWalletResponse" })
            .json("default", errors.WalletsErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Credit a wallet
     */
    async creditWallet(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.CreditWalletRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_1.encodeJSON)("body", payload$.CreditWalletRequest, { explode: true });
        const pathParams$ = {
            id: (0, encodings_1.encodeSimple)("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/api/wallets/wallets/{id}/credit")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "creditWallet",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void(204, operations.CreditWalletResponse$)
            .json("default", errors.WalletsErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Debit a wallet
     */
    async debitWallet(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.DebitWalletRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_1.encodeJSON)("body", payload$.DebitWalletRequest, { explode: true });
        const pathParams$ = {
            id: (0, encodings_1.encodeSimple)("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/api/wallets/wallets/{id}/debit")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "debitWallet",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(201, operations.DebitWalletResponse$, { key: "DebitWalletResponse" })
            .void(204, operations.DebitWalletResponse$)
            .json("default", errors.WalletsErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get detailed balance
     */
    async getBalance(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.GetBalanceRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            balanceName: (0, encodings_1.encodeSimple)("balanceName", payload$.balanceName, {
                explode: false,
                charEncoding: "percent",
            }),
            id: (0, encodings_1.encodeSimple)("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/api/wallets/wallets/{id}/balances/{balanceName}")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "getBalance",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.GetBalanceResponse$, { key: "GetBalanceResponse" })
            .json("default", errors.WalletsErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get a hold
     */
    async getHold(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.GetHoldRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            holdID: (0, encodings_1.encodeSimple)("holdID", payload$.holdID, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/wallets/holds/{holdID}")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "getHold",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.GetHoldResponse$, { key: "GetHoldResponse" })
            .json("default", errors.WalletsErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get all holds for a wallet
     */
    async getHolds(request, options) {
        var _a;
        const input$ = typeof request === "undefined" ? {} : request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.GetHoldsRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const path$ = this.templateURLComponent("/api/wallets/holds")();
        const query$ = (0, encodings_1.queryJoin)((0, encodings_1.encodeDeepObjectQuery)({
            metadata: payload$.metadata,
        }), (0, encodings_1.encodeFormQuery)({
            pageSize: payload$.pageSize,
            walletID: payload$.walletID,
            cursor: payload$.cursor,
        }));
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "getHolds",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.GetHoldsResponse$, { key: "GetHoldsResponse" })
            .json("default", errors.WalletsErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    async getTransactions(request, options) {
        var _a;
        const input$ = typeof request === "undefined" ? {} : request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.GetTransactionsRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const path$ = this.templateURLComponent("/api/wallets/transactions")();
        const query$ = (0, encodings_1.encodeFormQuery)({
            cursor: payload$.cursor,
            pageSize: payload$.pageSize,
            walletID: payload$.walletID,
        });
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "getTransactions",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.GetTransactionsResponse$, { key: "GetTransactionsResponse" })
            .json("default", errors.WalletsErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get a wallet
     */
    async getWallet(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.GetWalletRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            id: (0, encodings_1.encodeSimple)("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/api/wallets/wallets/{id}")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "getWallet",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.GetWalletResponse$, { key: "GetWalletResponse" })
            .void(404, operations.GetWalletResponse$)
            .json("default", errors.WalletsErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get wallet summary
     */
    async getWalletSummary(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.GetWalletSummaryRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            id: (0, encodings_1.encodeSimple)("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/api/wallets/wallets/{id}/summary")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "getWalletSummary",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.GetWalletSummaryResponse$, { key: "GetWalletSummaryResponse" })
            .void(404, operations.GetWalletSummaryResponse$)
            .json("default", errors.WalletsErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * List balances of a wallet
     */
    async listBalances(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.ListBalancesRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            id: (0, encodings_1.encodeSimple)("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/api/wallets/wallets/{id}/balances")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "listBalances",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.ListBalancesResponse$, { key: "ListBalancesResponse" })
            .fail("default")
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * List all wallets
     */
    async listWallets(request, options) {
        var _a;
        const input$ = typeof request === "undefined" ? {} : request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.ListWalletsRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const path$ = this.templateURLComponent("/api/wallets/wallets")();
        const query$ = (0, encodings_1.queryJoin)((0, encodings_1.encodeDeepObjectQuery)({
            metadata: payload$.metadata,
        }), (0, encodings_1.encodeFormQuery)({
            name: payload$.name,
            pageSize: payload$.pageSize,
            cursor: payload$.cursor,
        }));
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "listWallets",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.ListWalletsResponse$, { key: "ListWalletsResponse" })
            .json("default", errors.WalletsErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Update a wallet
     */
    async updateWallet(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.UpdateWalletRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_1.encodeJSON)("body", payload$.RequestBody, { explode: true });
        const pathParams$ = {
            id: (0, encodings_1.encodeSimple)("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/api/wallets/wallets/{id}")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "updateWallet",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "PATCH",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void(204, operations.UpdateWalletResponse$)
            .json("default", errors.WalletsErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Cancel a hold
     */
    async voidHold(request, options) {
        var _a;
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const payload$ = schemas$.parse(input$, (value$) => operations.VoidHoldRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            hold_id: (0, encodings_1.encodeSimple)("hold_id", payload$.hold_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/wallets/holds/{hold_id}/void")(pathParams$);
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "voidHold",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void(204, operations.VoidHoldResponse$)
            .json("default", errors.WalletsErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Get server info
     */
    async walletsgetServerInfo(options) {
        var _a;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const path$ = this.templateURLComponent("/api/wallets/_info")();
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "walletsgetServerInfo",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.WalletsgetServerInfoResponse$, { key: "ServerInfo" })
            .json("default", errors.WalletsErrorResponse$, { err: true })
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
}
exports.Wallets = Wallets;
//# sourceMappingURL=wallets.js.map
import { SDKOptions } from "../lib/config";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
export declare class Webhooks extends ClientSDK {
    private readonly options$;
    constructor(options?: SDKOptions);
    /**
     * Activate one config
     *
     * @remarks
     * Activate a webhooks config by ID, to start receiving webhooks to its endpoint.
     */
    activateConfig(request: operations.ActivateConfigRequest, options?: RequestOptions): Promise<operations.ActivateConfigResponse>;
    /**
     * Change the signing secret of a config
     *
     * @remarks
     * Change the signing secret of the endpoint of a webhooks config.
     *
     * If not passed or empty, a secret is automatically generated.
     * The format is a random string of bytes of size 24, base64 encoded. (larger size after encoding)
     *
     */
    changeConfigSecret(request: operations.ChangeConfigSecretRequest, options?: RequestOptions): Promise<operations.ChangeConfigSecretResponse>;
    /**
     * Deactivate one config
     *
     * @remarks
     * Deactivate a webhooks config by ID, to stop receiving webhooks to its endpoint.
     */
    deactivateConfig(request: operations.DeactivateConfigRequest, options?: RequestOptions): Promise<operations.DeactivateConfigResponse>;
    /**
     * Delete one config
     *
     * @remarks
     * Delete a webhooks config by ID.
     */
    deleteConfig(request: operations.DeleteConfigRequest, options?: RequestOptions): Promise<operations.DeleteConfigResponse>;
    /**
     * Get many configs
     *
     * @remarks
     * Sorted by updated date descending
     */
    getManyConfigs(request: operations.GetManyConfigsRequest, options?: RequestOptions): Promise<operations.GetManyConfigsResponse>;
    /**
     * Insert a new config
     *
     * @remarks
     * Insert a new webhooks config.
     *
     * The endpoint should be a valid https URL and be unique.
     *
     * The secret is the endpoint's verification secret.
     * If not passed or empty, a secret is automatically generated.
     * The format is a random string of bytes of size 24, base64 encoded. (larger size after encoding)
     *
     * All eventTypes are converted to lower-case when inserted.
     *
     */
    insertConfig(request: shared.ConfigUser, options?: RequestOptions): Promise<operations.InsertConfigResponse>;
    /**
     * Test one config
     *
     * @remarks
     * Test a config by sending a webhook to its endpoint.
     */
    testConfig(request: operations.TestConfigRequest, options?: RequestOptions): Promise<operations.TestConfigResponse>;
}
//# sourceMappingURL=webhooks.d.ts.map
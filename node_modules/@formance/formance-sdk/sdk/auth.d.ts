import { SDKOptions } from "../lib/config";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
export declare class Auth extends ClientSDK {
    private readonly options$;
    constructor(options?: SDKOptions);
    /**
     * Create client
     */
    createClient(request?: shared.CreateClientRequest | undefined, options?: RequestOptions): Promise<operations.CreateClientResponse>;
    /**
     * Add a secret to a client
     */
    createSecret(request: operations.CreateSecretRequest, options?: RequestOptions): Promise<operations.CreateSecretResponse>;
    /**
     * Delete client
     */
    deleteClient(request: operations.DeleteClientRequest, options?: RequestOptions): Promise<operations.DeleteClientResponse>;
    /**
     * Delete a secret from a client
     */
    deleteSecret(request: operations.DeleteSecretRequest, options?: RequestOptions): Promise<operations.DeleteSecretResponse>;
    /**
     * List clients
     */
    listClients(options?: RequestOptions): Promise<operations.ListClientsResponse>;
    /**
     * List users
     *
     * @remarks
     * List users
     */
    listUsers(options?: RequestOptions): Promise<operations.ListUsersResponse>;
    /**
     * Read client
     */
    readClient(request: operations.ReadClientRequest, options?: RequestOptions): Promise<operations.ReadClientResponse>;
    /**
     * Read user
     *
     * @remarks
     * Read user
     */
    readUser(request: operations.ReadUserRequest, options?: RequestOptions): Promise<operations.ReadUserResponse>;
    /**
     * Update client
     */
    updateClient(request: operations.UpdateClientRequest, options?: RequestOptions): Promise<operations.UpdateClientResponse>;
}
//# sourceMappingURL=auth.d.ts.map
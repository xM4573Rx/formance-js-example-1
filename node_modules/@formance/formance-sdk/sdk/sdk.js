"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = void 0;
const hooks_1 = require("../hooks");
const config_1 = require("../lib/config");
const http_1 = require("../lib/http");
const sdks_1 = require("../lib/sdks");
const auth_1 = require("./auth");
const ledger_1 = require("./ledger");
const operations = __importStar(require("./models/operations"));
const orchestration_1 = require("./orchestration");
const payments_1 = require("./payments");
const reconciliation_1 = require("./reconciliation");
const search_1 = require("./search");
const wallets_1 = require("./wallets");
const webhooks_1 = require("./webhooks");
class SDK extends sdks_1.ClientSDK {
    constructor(options = {}) {
        const opt = options;
        let hooks;
        if (typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof hooks_1.SDKHooks) {
            hooks = opt.hooks;
        }
        else {
            hooks = new hooks_1.SDKHooks();
        }
        super({
            client: options.httpClient || new http_1.HTTPClient(),
            baseURL: (0, config_1.serverURLFromOptions)(options),
            hooks,
        });
        this.options$ = { ...options, hooks };
        void this.options$;
    }
    get auth() {
        var _a;
        return ((_a = this._auth) !== null && _a !== void 0 ? _a : (this._auth = new auth_1.Auth(this.options$)));
    }
    get ledger() {
        var _a;
        return ((_a = this._ledger) !== null && _a !== void 0 ? _a : (this._ledger = new ledger_1.Ledger(this.options$)));
    }
    get orchestration() {
        var _a;
        return ((_a = this._orchestration) !== null && _a !== void 0 ? _a : (this._orchestration = new orchestration_1.Orchestration(this.options$)));
    }
    get payments() {
        var _a;
        return ((_a = this._payments) !== null && _a !== void 0 ? _a : (this._payments = new payments_1.Payments(this.options$)));
    }
    get reconciliation() {
        var _a;
        return ((_a = this._reconciliation) !== null && _a !== void 0 ? _a : (this._reconciliation = new reconciliation_1.Reconciliation(this.options$)));
    }
    get search() {
        var _a;
        return ((_a = this._search) !== null && _a !== void 0 ? _a : (this._search = new search_1.Search(this.options$)));
    }
    get wallets() {
        var _a;
        return ((_a = this._wallets) !== null && _a !== void 0 ? _a : (this._wallets = new wallets_1.Wallets(this.options$)));
    }
    get webhooks() {
        var _a;
        return ((_a = this._webhooks) !== null && _a !== void 0 ? _a : (this._webhooks = new webhooks_1.Webhooks(this.options$)));
    }
    /**
     * Retrieve OpenID connect well-knowns.
     */
    async getOIDCWellKnowns(options) {
        var _a;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");
        const path$ = this.templateURLComponent("/api/auth/.well-known/openid-configuration")();
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "getOIDCWellKnowns",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .void(200, operations.GetOIDCWellKnownsResponse$)
            .fail("default")
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
    /**
     * Show stack version information
     */
    async getVersions(options) {
        var _a;
        const headers$ = new Headers();
        headers$.set("user-agent", config_1.SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");
        const path$ = this.templateURLComponent("/versions")();
        const query$ = "";
        let security$;
        if (typeof this.options$.authorization === "function") {
            security$ = { authorization: await this.options$.authorization() };
        }
        else if (this.options$.authorization) {
            security$ = { authorization: this.options$.authorization };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "getVersions",
            oAuth2Scopes: [],
            securitySource: this.options$.authorization,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const doOptions = { context, errorCodes: ["default"] };
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
        }, options);
        const response = await this.do$(request$, doOptions);
        const responseFields$ = {
            ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };
        const [result$] = await this.matcher()
            .json(200, operations.GetVersionsResponse$, { key: "GetVersionsResponse" })
            .fail("default")
            .match(response, { extraFields: responseFields$ });
        return result$;
    }
}
exports.SDK = SDK;
//# sourceMappingURL=sdk.js.map
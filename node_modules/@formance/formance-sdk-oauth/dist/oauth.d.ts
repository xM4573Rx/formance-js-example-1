export interface AuthorizationProviderOptions {
    endpointUrl: string;
    clientId: string;
    clientSecret: string;
    tolerance?: number;
}
/**
 * Creates an access token provider that uses the OAuth 2.0 client credentials flow.
 *
 * This function returns a function that can be used to retrieve an access token on-demand. The access token is cached
 * and refreshed automatically when it expires.
 *
 * @param endpointUrl The URL of the formance stack you are using.
 * @param clientId The client ID of the OAuth 2.0 client.
 * @param clientSecret The client secret of the OAuth 2.0 client.
 * @param tolerance The number of milliseconds to subtract from the token expiry time. This is used to ensure that the
 *                  token is refreshed before it expires. It takes into account a potential clock skew between the client
 *                  and the server, or a delay in the network. Defaults to 5 minutes.
 */
export declare function createAuthorizationProvider({ endpointUrl, clientId, clientSecret, tolerance }: AuthorizationProviderOptions): () => Promise<string>;
//# sourceMappingURL=oauth.d.ts.map